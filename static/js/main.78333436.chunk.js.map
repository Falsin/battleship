{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","ship","shipPart","obj","isDamage","Array","length","fill","map","Object","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","newShipsArray","name","placeShips","index","condition","this","selectedCells","find","findElem","undefined","newArr","id","coord","hoveredCells","push","addCellsIntoHoveredCells","orientation","forEach","isReady","changeOrientation","Player","prototype","create","Robot","humanPlayer","setName","selectedName","createHumanPlayer","div","Regist","props","placeholder","onBlur","e","target","value","to","Square","error","key","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","useEffect","array","state","board","includes","item","onClick","isHuman","cloneBoard","setBoard","arrangeShips","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","Cell","React","memo","Board","countRows","cloneState","Game","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78333436.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const hoveredCells = [];\n  const isReady = false;\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips(index) {\n    let condition = this.selectedCells.find(elem => elem === index);\n    let findElem = newShipsArray.find(elem => !elem.isPlaced);\n\n    if (condition === undefined) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n    }\n    this.hoveredCells = [];\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    this.hoveredCells = [];\n\n    if (this.orientation === 'horizontal' && index % 10 + ship.length <= 10) {\n      ship.shipPart.forEach((elem, id) => {\n        this.hoveredCells.push(index + id)\n      });\n    } else if (this.orientation === 'vertical' && index + (ship.length * 10 - 10) <= 99) {\n      ship.shipPart.forEach((elem, id) => {\n        this.hoveredCells.push(index + (id * 10))\n      });\n    }\n  }\n\n  function sayHello(params) {\n    return 'Hello!'\n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    isReady,\n    changeOrientation,\n    orientation,\n  }\n}\n\nexport default gameBoard;","import gameBoard from \"./gameBoard\";\n\nfunction Player() {\n  const prototype = gameBoard();\n  let isReady = false;\n\n  return Object.assign(Object.create(prototype), isReady);\n}\n\nfunction Robot() {\n  const prototype = Player();\n\n  /*some funcs */\n\n  return Object.assign(Object.create(prototype), /*some props */);\n}\n\nconst human = Player();\nconst bot = Robot()\n\n\n\nconst createHumanPlayer =  (() => {\n  let name; \n\n  return function () {\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n    }\n\n    return {name, setName}\n  }\n})()\n\nfunction createBotPlayer() {\n  function makeMove() {\n  }\n\n  return {makeMove}\n}\n\nlet humanPlayer = createHumanPlayer();\n\nexport {humanPlayer, createBotPlayer}","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { humanPlayer } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => humanPlayer.setName(e.target.value)} />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.error.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n    const [isSelected, setIsSelected] = useState(false);\n    const [isError, setIsError]       = useState(false);\n    const [isHover, setIsHover]       = useState(false);\n\n  useEffect(() => {\n    const array = props.state.board.newShipsArray;\n    const board = props.state.board;\n\n    if (board.hoveredCells.includes(props.index)) {\n      if (board.selectedCells.includes(props.index)) {\n        setIsError(true);\n      } else {\n        setIsHover(true);\n      }\n    } else {\n      if (isHover) {\n        setIsHover(false);\n      }\n      setIsError(false);\n\n      for (const item of array) {\n        if (item.isPlaced) {\n          let condition = item.shipPart.find(elem => elem.coord === props.index)\n      \n          if (condition) {\n            setIsSelected(true);\n          }\n        }\n      }\n    }\n  })\n  \n  function arrangeShips() {\n    let cloneBoard = Object.assign({}, props.state.board);\n    cloneBoard.placeShips(props.index);\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n    }\n\n    props.state.setBoard(cloneBoard);\n  }\n\n  function shipHover() {\n    let cloneBoard = Object.assign({}, props.state.board);\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    props.state.setBoard(cloneBoard);\n  }\n  \n    return (\n      <Square \n      onClick={() => props.state.board.isReady || !props.isHuman ? null : arrangeShips()} \n      onMouseEnter={() => props.state.board.isReady || !props.isHuman ? null : shipHover()}\n      status={{key: isSelected}} error={{key: isError}} hover={{key: isHover}}>{props.index}</Square>\n    )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  if (nextProps.state.board.hoveredCells.includes(nextProps.index) || prevProps.state.board.hoveredCells.includes(nextProps.index)) {\n    return false;\n  } else if (prevProps.state.board.isReady !== nextProps.state.board.isReady) {\n    return false\n  } else if (prevProps.state.board.orientation !== nextProps.state.board.orientation) {\n    return false;\n  } else {\n    const array = nextProps.state.board.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nexport default Cell;","import React, { useState } from 'react';\nimport uniqid from 'uniqid';\nimport gameBoard from '../../../factoriesFunc/gameBoard';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport { useEffect } from 'react/cjs/react.development';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const [board, setBoard] = useState(gameBoard());\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => <Cell key={id} index={id} state={{board, setBoard}} isHuman={props.isHuman} />);\n  }\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = Object.assign({}, board);\n        cloneState.changeOrientation();\n        setBoard(cloneState);\n      }}>axis: {board.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\n//import { humanPlayer, createBotPlayer } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n  }\n`;\n\nexport default function Game() {\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board /* player={humanPlayer} */ isHuman />\n        <Board /* player={createBotPlayer()} */ />\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}