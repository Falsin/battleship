{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","humanPlayer","name","setName","selectedName","this","createHumanPlayer","div","Regist","props","placeholder","onBlur","e","target","value","to","ship","shipPart","obj","isDamage","Array","length","fill","map","Object","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","newShipsArray","placeShips","index","find","forEach","id","coord","Square","status","key","Cell","React","memo","useState","isSelected","setIsSelected","console","log","useEffect","array","state","board","i","onClick","cloneBoard","findElem","setBoard","prevProps","nextProps","Board","countRows","Game","player","makeMove","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca68c307.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","/* function player() {\n  let name;\n\n  return {name, setName}\n} */\n\nconst createHumanPlayer =  (() => {\n  let name; \n\n  return function () {\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n    }\n\n    return {name, setName}\n  }\n})()\n\nfunction createBotPlayer() {\n  function makeMove() {\n    /*something */\n  }\n\n  return {makeMove}\n}\n\nlet humanPlayer = createHumanPlayer();\n/* let botPlayer   = player(); */\n\nexport {humanPlayer, createBotPlayer}","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { humanPlayer } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => humanPlayer.setName(e.target.value)} />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  let orientation = 'horizontal';\n\n  let shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  /* function placeShips(coord, context) {\n    let requiredItem = newShipsArray.find(elem => !elem.isPlaced);\n\n    if (orientation === 'horizontal') {\n      if (coord.vertical + requiredItem.length < 11) {\n        requiredItem.shipPart.forEach((elem, id) => {\n          elem.coord = Object.assign({}, coord, {vertical: coord.vertical + id});\n        });\n        requiredItem.isPlaced = true;\n        return requiredItem;\n      } else {\n        return 'Invalid value';\n      }\n    } else {\n      let maxValue = 'J'.charCodeAt(0);\n      if (coord.vertical.charCodeAt(0) + requiredItem.length <= maxValue) {\n        requiredItem.shipPart.forEach((elem, id) => {\n          elem.coord = Object.assign({}, coord, {horizontal: String.fromCharCode( ((coord.horizontal).charCodeAt(0) + id)) });\n        });\n      }\n    } */\n\n    function placeShips(index) {\n      let findElem = newShipsArray.find(elem => {\n        return !elem.isPlaced;\n      })\n\n      if (orientation === 'horizontal') {\n        findElem.shipPart.forEach((elem, id) => {\n          elem.coord = Object.assign({}, {coord: index + id});\n        })\n      }\n    }\n\n  return {\n    placeShips,\n    newShipsArray,\n  }\n}\n\nexport default gameBoard;","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Square = styled.div`\n  background:  ${props => props.status.key ? 'gray' : `rgb(66, 66, 255)`};\n  border: solid white 1px;\n`;\n\n/* class Cell extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      parentState: props.state,\n      isSelected: false,\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const array = nextProps.state.board.newShipsArray;\n\n    //console.log('work')\n\n    if (this.state.isSelected !== nextState.isSelected) {\n      console.log(this.state.isSelected)\n      console.log(nextState.isSelected)\n      return true;\n    } else {\n      \n    }\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].isPlaced) {\n        const requiredItem = array[i];\n\n        let condition = requiredItem.shipPart.find(elem => {\n          return elem.coord.coord === this.props.index;\n        })\n\n        if (condition) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const array = this.state.parentState.board.newShipsArray;\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].isPlaced) {\n        const requiredItem = array[i];\n\n        let condition = requiredItem.shipPart.find(elem => {\n          return elem.coord.coord === this.props.index;\n        })\n\n        if (condition && !prevState.isSelected) {\n          this.setState({isSelected: true})\n\n        }\n      }\n    }\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <Square\n    \n    onClick={() => {\n      const cloneBoard = Object.assign({}, this.props.state.board)\n      let findElem = cloneBoard.newShipsArray.find(elem => {\n        return !elem.isPlaced;\n      })\n\n      let remainderOfDivision = this.props.index % 10;\n\n      if (remainderOfDivision + findElem.length <= 10) {\n        cloneBoard.placeShips(this.props.index);\n        findElem.isPlaced = true;\n        this.props.state.setBoard(cloneBoard)\n      } else {\n      }\n    }} status={{key: this.state.isSelected}}>{this.props.index}</Square>\n    )\n  }\n\n}\n\nexport default Cell; */\n\nconst Cell = React.memo((props) => {\n\n  const [isSelected, setIsSelected] = useState(false);\n  console.log('work')\n\n  useEffect(() => {\n    const array = props.state.board.newShipsArray;\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].isPlaced) {\n        const requiredItem = array[i];\n\n        let condition = requiredItem.shipPart.find(elem => {\n          return elem.coord.coord === props.index;\n        })\n\n        if (condition) {\n          setIsSelected(true);\n        }\n      }\n    }\n  })\n  return (\n    <Square\n    \n    onClick={() => {\n      const cloneBoard = Object.assign({}, props.state.board)\n      let findElem = cloneBoard.newShipsArray.find(elem => {\n        return !elem.isPlaced;\n      })\n\n      let remainderOfDivision = props.index % 10;\n\n      if (remainderOfDivision + findElem.length <= 10) {\n        cloneBoard.placeShips(props.index);\n        findElem.isPlaced = true;\n        props.state.setBoard(cloneBoard)\n      } else {\n      }\n    }} status={{key: isSelected}}>{props.index}</Square>\n  )\n}, (prevProps, nextProps) => {\n  const array = nextProps.state.board.newShipsArray;\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].isPlaced) {\n        const requiredItem = array[i];\n\n        let condition = requiredItem.shipPart.find(elem => {\n          return elem.coord.coord === nextProps.index;\n        })\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n    return true;\n\n  //return prevProps === nextProps;\n})\n\nexport default Cell;\n\n/* import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Item = styled.div`\n  width: 3vmin;\n  height: 3vmin;\n  background:  ${props => props.status.key ? 'gray' : `rgb(66, 66, 255)`};\n  border: solid white 1px;\n`;\n\nexport default function Cell(props) {\n\n  const [coord] = useState({horizontal: props.horizontal, vertical: props.vertical});\n  const [isSelected, setIsSelected] = useState(false);\n  const [boardState, setBoardState] = useState(props.state);\n\n  useEffect(() => {\n    console.log(boardState)\n    let findElem;\n    let shipsArray = boardState.objBoard.board.newShipsArray;\n\n    for (let i = 0; i < shipsArray.length; i++) {\n      findElem = shipsArray[i].shipPart.find(elem => {\n        return elem.coord && elem.coord.vertical === coord.vertical && elem.coord.horizontal === coord.horizontal;\n      })\n\n      if (findElem) {\n        break;\n      }\n    }\n\n    if (findElem) {\n      setIsSelected(true)\n    }\n\n    \n  }, [isSelected])\n\n  return (\n    <Item\n    onMouseEnter={() => {\n      let array = boardState.objBoard.board.newShipsArray;\n      let requiredItem = array.find(elem => !elem.isPlaced);\n\n      if (coord.vertical + requiredItem.length - 1 <= boardState.countElements.countCells) {\n        let createArray = new Array(requiredItem.length).fill().map((elem, id) => Object.assign({}, coord, {vertical: coord.vertical + id}))\n        \n        console.log(createArray)\n        boardState.cells.setSelectedCells(createArray.map(elem => Object.assign(elem)))\n      } else {\n        return 'Invalid value';\n      }\n    }}\n\n\n    onClick={() => {\n      let board = Object.assign({}, boardState.objBoard.board)\n      let placedCells = board.placeShips(coord).shipPart.map(elem => elem.coord);  \n\n      boardState.cells.setSelectedCells(placedCells);\n      boardState.objBoard.setBoard(board)\n    }}\n    status={{key: isSelected}} />\n  )\n} */","import React, { useState } from 'react';\nimport uniqid from 'uniqid';\nimport gameBoard from '../../../factoriesFunc/gameBoard';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 4vmin);\n  grid-template-rows: repeat(10, 4vmin);  \n`;\n\n\nexport default function Board(props) {\n\n/*   const [board, setBoard] = useState(gameBoard())\n  const [player, setPlayer] = useState(props.player);\n  const [isReady, setReadyStatus] = useState(false);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [[countRows, countCells], setCountElements] = useState([10, 10]); */\n\n/*   const state = {\n    objStatus: {isReady, setReadyStatus},\n    objBoard: {board, setBoard},\n    objPlayer: {player, setPlayer},\n    cells: {selectedCells, setSelectedCells},\n    countElements: {countRows, countCells, setCountElements},\n  } */\n\n  /* function createBoardTemplate(countRows, countCells) {\n    return new Array(countRows).fill()\n    .map((elem, id) => {\n      let horizontalCoord = String.fromCharCode('A'.charCodeAt(0) + id);\n      return <Row horizontal={horizontalCoord} key={uniqid()} state={state} />\n    });\n  } */\n\n  const [board, setBoard] = useState(gameBoard());\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => <Cell key={id} index={id} state={{board, setBoard}} />);\n  }\n\n  return (\n    <div>\n      <Wrapper>\n        {createBoardTemplate(100)}\n      </Wrapper>\n    </div>\n  )\n}\n\n/* let playersContext = React.createContext(null);\n\nexport default function Board(props) {\n\n  const [board, setBoard] = useState(gameBoard())\n  const [player, setPlayer] = useState(props.player);\n  const [isReady, setReadyStatus] = useState(false);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [[countRows, countCells], setCountElements] = useState([10, 10])\n\n  let objStatus     = {isReady, setReadyStatus};\n  let objBoard      = {board, setBoard};\n  let objPlayer     = {player, setPlayer};\n  let cells         = {selectedCells, setSelectedCells};\n  let countElements = {countRows, countCells, setCountElements};\n\n  function createBoardTemplate(countRows, countCells) {\n    return new Array(countRows).fill()\n    .map((elem, id) => {\n      let horizontalCoord = String.fromCharCode('A'.charCodeAt(0) + id);\n      return <Row horizontal={horizontalCoord} key={uniqid()} countCells={countCells} />\n    });\n  }\n\n  return (\n    <playersContext.Provider value={{user: objPlayer, status: objStatus, board: objBoard, selectedCells: cells, countItems: countElements, changeContext: () => {}}}>\n      <div>\n        {createBoardTemplate(countRows, countCells).map(elem => elem)}\n      </div>\n    </playersContext.Provider>\n  )\n}\n\nexport { playersContext }; */","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { humanPlayer, createBotPlayer } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nexport default function Game() {\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} />\n        <Board player={createBotPlayer()} />\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}