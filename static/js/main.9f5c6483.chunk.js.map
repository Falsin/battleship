{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","factoriesFunc/cloneObj.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","ship","shipPart","obj","isDamage","Array","length","fill","map","Object","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","placeShips","index","condition","this","selectedCells","find","findElem","newShipsArray","undefined","newArr","id","coord","hoveredCells","cellsArray","push","name","addCellsIntoHoveredCells","orientation","includes","console","log","isValid","isReady","changeOrientation","templateObjForPlayers","prototype","create","Player","savedName","setName","selectedName","div","Regist","props","placeholder","onBlur","e","target","value","to","cloneObj","item","cloneElem","isArray","iterator","getPrototypeOf","key","hasOwnProperty","call","Square","error","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","array","state","player","useEffect","onClick","isHuman","cloneBoard","func","arrangeShips","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","nextPlayer","prevPlayer","sumNumbersInArray","reduce","prevVal","currVal","Cell","React","memo","Board","countRows","cloneState","Game","humanPlayer","setHumanPlayer","Robot","botPlayer","setBotPlayer","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEMA,EAAUC,IAAOC,OAAV,uIAUE,SAASC,IACtB,OACE,cAACH,EAAD,UACE,mBAAGI,KAAK,4BAAR,8BCbN,IAAMJ,EAAUC,IAAOI,OAAV,iFAMPC,EAAQL,IAAOM,GAAV,gFAMI,SAASC,EAAOC,GAC7B,OACE,cAAC,EAAD,UACE,cAACH,EAAD,2B,oBCQSI,MAzBf,SAAcA,GACZ,IAAIC,EAgBN,SAAyBD,GACvB,IAAIE,EAAM,CACRC,UAAU,GAGZ,OAAO,IAAIC,MAAMJ,EAAKK,QAAQC,OAAOC,KAAI,kBAAMC,OAAOC,OAAO,GAAIP,MArBlDQ,CAAgBV,GAG/B,MAAO,CACLC,WACAU,IAFK,SAEDC,GACFX,EAASW,GAAgBT,UAAW,GAEtCU,OALK,WAOH,OADgBZ,EAASa,QAAO,SAAAC,GAAI,OAAIA,EAAKZ,YAAUE,SAClCJ,EAASI,QAEhCW,UAXa,ICmHFC,MAnHf,WAuGE,MAAO,CACLC,WA7DF,SAAoBC,GAAQ,IAAD,OACrBC,EAAYC,KAAKC,cAAcC,MAAK,SAAAR,GAAI,OAAIA,IAASI,KACrDK,EAAWH,KAAKI,cAAcF,MAAK,SAAAR,GAAI,OAAKA,EAAKC,YAErD,QAAkBU,IAAdN,EAAyB,CAAC,IAAD,EACrBO,EAASH,EAASvB,SAASM,KAAI,SAACQ,EAAMa,GAAP,OAAcb,EAAKc,MAAQ,EAAKC,aAAaC,WAAWH,OAC7F,EAAAP,KAAKC,eAAcU,KAAnB,oBAA2BL,IAC3BH,EAASR,UAAW,EAEtBK,KAAKS,aAAaC,WAAa,IAqD/BN,cAhGiB,CACjB,CACEQ,KAAM,UACN5B,OAAQ,GAEV,CACE4B,KAAM,aACN5B,OAAQ,GAEV,CACE4B,KAAM,UACN5B,OAAQ,GAEV,CACE4B,KAAM,YACN5B,OAAQ,GAEV,CACE4B,KAAM,YACN5B,OAAQ,IAImBE,KAAI,SAAAQ,GACjC,OAAO,2BACFA,GACAf,EAAKe,OAuEVmB,yBAnDF,SAAkClC,EAAMmB,GACtC,GAAyB,eAArBE,KAAKc,YACP,GAAIhB,EAAQ,GAAKnB,EAAKK,QAAU,GAE1BgB,KAAKC,cAAcc,SAASjB,IAC9BkB,QAAQC,IAAI,QACZjB,KAAKS,aAAaC,WAAa/B,EAAKC,SAASM,KAAI,SAACQ,EAAMa,GAAP,OAAcT,EAAQS,KACvEP,KAAKS,aAAaS,SAAU,IAE5BlB,KAAKS,aAAaC,WAAa/B,EAAKC,SAASM,KAAI,SAACQ,EAAMa,GAAP,OAAcT,EAAQS,KACvEP,KAAKS,aAAaS,SAAU,OAEzB,CAELlB,KAAKS,aAAaC,WAAa,GAG/B,IAFA,IAAIH,EAAK,EAEFT,EAAQ,GAAKS,EAAK,IACvBP,KAAKS,aAAaC,WAAWC,KAAKb,EAAQS,KAG5CP,KAAKS,aAAaS,SAAU,OAEzB,GAAyB,aAArBlB,KAAKc,YACZ,GAAIhB,GAAuB,GAAdnB,EAAKK,OAAc,KAAO,GAEjCgB,KAAKC,cAAcc,SAASjB,IAC9BE,KAAKS,aAAaC,WAAa/B,EAAKC,SAASM,KAAI,SAACQ,EAAMa,GAAP,OAAcT,EAAc,GAALS,KACxEP,KAAKS,aAAaS,SAAU,IAE5BlB,KAAKS,aAAaC,WAAa/B,EAAKC,SAASM,KAAI,SAACQ,EAAMa,GAAP,OAAcT,EAAc,GAALS,KACxEP,KAAKS,aAAaS,SAAU,OAGzB,CAELlB,KAAKS,aAAaC,WAAa,GAG/B,IAFA,IAAIH,EAAK,EAEFT,EAAQS,GAAM,IACnBP,KAAKS,aAAaC,WAAWC,KAAKb,EAAQS,GAC1CA,GAAM,GAERP,KAAKS,aAAaS,SAAU,IASlCT,aAxGmB,CACnBC,WAAY,GACZQ,SAAS,GAuGTjB,cA1GoB,GA2GpBkB,SAtGc,EAuGdC,kBAvEF,WACE,OAAOpB,KAAKc,YAAoC,aAArBd,KAAKc,YAA8B,aAAe,YAuE7EA,YA9GkB,eCDtB,SAASO,IACP,IAAMC,EAAY1B,IAGlB,OAAOT,OAAOC,OAAOD,OAAOoC,OAAOD,GAAY,CAACH,SAFhC,IAKlB,I,EAAMK,EAAU,WACd,IAAIC,EAAY,KAEhB,OAAO,WACL,IAAMb,EAAOa,EACPH,EAAYD,IAOlB,OAAOlC,OAAOC,OAAOD,OAAOoC,OAAOD,GAAY,CAACV,OAAMc,QALtD,SAAiBC,GACfF,EAAYE,EACZ3B,KAAKY,KAAOe,MATF,GCLV1D,EAAUC,IAAO0D,IAAV,iaA4BE,SAASC,EAAOC,GAC7B,OACE,eAAC,EAAD,WACE,oDACA,uBAAOC,YAAY,SAASC,OAAQ,SAACC,GACnCT,IAASE,QAAQO,EAAEC,OAAOC,UAE5B,cAAC,IAAD,CAAMC,GAAG,YAAT,2B,2BCESC,I,EAAAA,EAzCf,SAASA,EAASC,GAChB,IAAIC,EAEJ,GAAIxD,MAAMyD,QAAQF,GAAO,CACvBC,EAAY,GADW,oBAGAD,GAHA,IAGvB,2BAA6B,CAAC,IAAnBG,EAAkB,QAC3BF,EAAU5B,KAAK0B,EAASI,KAJH,oCAOlB,GAAoB,kBAATH,GAAqBA,EAAM,CAC3C,IAAIhB,EAAYe,EAASlD,OAAOuD,eAAeJ,IAG/C,IAAK,IAAMK,KAFXJ,EAAYpD,OAAOoC,OAAOD,GAERgB,EACZnD,OAAOyD,eAAeC,KAAKP,EAAMK,KAEnCJ,EAAUI,GAAON,EAASC,EAAKK,UAkBnCJ,EAAYD,EAGd,OAAOC,GChCHO,EAAS5E,IAAO0D,IAAV,4EACI,SAACE,GACb,OAASA,EAAMiB,MAAMJ,IAAO,MACnBb,EAAMkB,OAAOL,KAAOb,EAAMmB,MAAMN,IAAO,OAAxC,sBAOZ,SAASO,EAAYpB,GACnB,MAAoCqB,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAgBC,EAAhB,KAIMC,EAAQ5B,EAAM6B,MAAMC,OAAOxD,cAC3BwD,EAAS9B,EAAM6B,MAAMC,OAoD3B,OAlDAC,qBAAU,WACR,GAAID,EAAOnD,aAAaC,WAAWK,SAASe,EAAMhC,OAE5C8D,EAAOnD,aAAaS,SACtBuC,GAAW,GACXF,GAAW,IAEXA,GAAW,OAER,CACLE,GAAW,GACXF,GAAW,GAFN,oBAIcG,GAJd,IAIL,2BAA0B,CAAC,IAAhBpB,EAAe,QACxB,GAAIA,EAAK3C,SACS2C,EAAK1D,SAASsB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAUsB,EAAMhC,UAG9DuD,GAAc,IATf,mCA0CP,cAACP,EAAD,CACAgB,QAAS,kBAAMF,EAAOzC,UAAYW,EAAMiC,QAAU,KA3BpD,WAEE,IAAIC,EAAa3B,EAASP,EAAM6B,MAAMC,QACtCI,EAAWnE,WAAWiC,EAAMhC,OAIbkE,EAAW5D,cAAcF,MAAK,SAAAR,GAAI,OAAKA,EAAKC,cAGzDqE,EAAW7C,SAAU,GAEvBW,EAAM6B,MAAMM,KAAKD,GAewCE,IACzDC,aAAc,kBAAMP,EAAOzC,UAAYW,EAAMiC,QAAU,KAbzD,WACE,IAAIC,EAAa3B,EAASP,EAAM6B,MAAMC,QAElCzD,EAAW6D,EAAW5D,cAAcF,MAAK,SAAAR,GAAI,OAAKA,EAAKC,YAE3DqE,EAAWnD,yBAAyBV,EAAU2B,EAAMhC,OACpDkB,QAAQC,IAAI+C,GACZlC,EAAM6B,MAAMM,KAAKD,GAM6CI,IAC9DpB,OAAQ,CAACL,IAAKS,GAAaL,MAAO,CAACJ,IAAKW,GAAUL,MAAO,CAACN,IAAKa,GAH/D,SAG0E1B,EAAMhC,QAIpF,SAASuE,EAAkBC,EAAWC,GAEpC,IAAMC,EAAaD,EAAUZ,MAAMC,OAC7Ba,EAAaH,EAAUX,MAAMC,OAEnC,GAAIa,EAAWhE,aAAaC,WAAWK,SAASwD,EAAUzE,QAAU0E,EAAW/D,aAAaC,WAAWK,SAASwD,EAAUzE,OACxH,OAAO,EACF,GAAI2E,EAAWtD,UAAYqD,EAAWrD,QAC3C,OAAO,EACF,GAAIsD,EAAW3D,cAAgB0D,EAAW1D,YAC/C,OAAO,EACF,GAAI4D,EAAkBD,EAAWxE,iBAAmByE,EAAkBF,EAAWvE,eACtF,OAAO,EAEP,IADK,EACCyD,EAAQe,EAAWrE,cADpB,cAGcsD,GAHd,IAGL,2BAA0B,CAAC,IAAhBpB,EAAe,QACxB,GAAIA,EAAK3C,SAGP,GAFgB2C,EAAK1D,SAASsB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAU+D,EAAUzE,SAGlE,OAAO,GARR,8BAaP,OAAO,EAGT,SAAS4E,EAAkBhB,GACzB,OAAOA,EAAMiB,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAGhDC,I,IAAAA,EAvGFC,IAAMC,KAAK9B,EAAYmB,GCN9BpG,EAAUC,IAAO0D,IAAV,mPAeE,SAASqD,EAAMnD,GAC5B,IAK6BoD,EALvBvB,EAAQ,CACZC,OAAQ9B,EAAM8B,OACdK,KAAMnC,EAAMmC,MASd,OACE,eAAC,EAAD,WACInC,EAAMiC,QAAW,yBAAQD,QAAS,WAClC,IAAIqB,EAAa9C,EAASP,EAAM8B,QAChCuB,EAAW/D,oBACXU,EAAMmC,KAAKkB,IAHM,mBAIoB,eAA7BrD,EAAM8B,OAAO9C,YAA+B,IAAM,OAAgB,KAC5E,+BAbyBoE,EAcF,IAblB,IAAInG,MAAMmG,GAAWjG,OAAOC,KAAI,SAACQ,EAAMa,GAC5C,OAAO,cAAC,EAAD,CAAeT,MAAOS,EAAIoD,MAAOA,EAAOI,QAASjC,EAAMiC,SAA5CxD,YC1BxB,I,EAAMtC,EAAUC,IAAO0D,IAAV,0GAOE,SAASwD,IACtB,MAAsCjC,mBAAS3B,KAA/C,mBAAO6D,EAAP,KAAoBC,EAApB,KACA,EAAkCnC,mBLWtB,WACZ,IAAM7B,EAAYD,IAGlB,OAAOlC,OAAOC,OAAOD,OAAOoC,OAAOD,GAAY,CAACV,KAFnC,UKb8B2E,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,OACE,cAAC,EAAD,UACE,sBAAKlF,GAAG,aAAR,UACE,cAAC0E,EAAD,CAAOrB,OAAQyB,EAAapB,KAAMqB,EAAgBvB,SAAO,IACzD,cAACkB,EAAD,CAAOrB,OAAQ4B,EAAWvB,KAAMwB,SCjBzB,SAASC,EAAY5D,GAClC,MACkB,iBAAfA,EAAM6D,KAA2B,cAAC9D,EAAD,IAAa,cAACuD,EAAD,ICAnD,IAAMQ,EAAU1H,IAAO2H,QAAV,+FAME,SAASC,EAAiBpH,GACvC,OACE,eAACkH,EAAD,WACE,cAACnH,EAAD,IACA,cAACiH,EAAD,CAAaC,KAAM,iBACnB,cAACvH,EAAD,OCFS2H,MAVf,SAAkBrH,GAChB,OACE,oCACE,cAACD,EAAD,IACA,cAACiH,EAAD,IACA,cAACtH,EAAD,QCMS4H,MAXf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAWJ,U,MCHjDK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f5c6483.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const hoveredCells = {\n    cellsArray: [],\n    isValid: true,\n  }\n  const isReady = false;\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips(index) {\n    let condition = this.selectedCells.find(elem => elem === index);\n    let findElem = this.newShipsArray.find(elem => !elem.isPlaced);\n\n    if (condition === undefined) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells.cellsArray[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n    }\n    this.hoveredCells.cellsArray = [];\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    if (this.orientation === 'horizontal') {\n      if (index % 10 + ship.length <= 10) {\n\n        if (this.selectedCells.includes(index)) {\n          console.log('work')\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = false;\n        } else {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = true;\n        }\n      } else {\n\n        this.hoveredCells.cellsArray = [];\n        let id = 0;\n\n        while (index % 10 + id < 10) {\n          this.hoveredCells.cellsArray.push(index + id++);\n        }\n        \n        this.hoveredCells.isValid = false;\n      }\n    } else if (this.orientation === 'vertical') {\n        if (index + (ship.length * 10 - 10) <= 99) {\n\n          if (this.selectedCells.includes(index)) {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = false;\n          } else {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = true;\n          }\n\n        } else {\n\n          this.hoveredCells.cellsArray = [];\n          let id = 0;\n\n          while (index + id <= 99) {\n            this.hoveredCells.cellsArray.push(index + id);\n            id += 10;\n          }\n          this.hoveredCells.isValid = false;\n        }\n    } \n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    isReady,\n    changeOrientation,\n    orientation,\n  }\n}\n\nexport default gameBoard;","import gameBoard from \"./gameBoard\";\n\nfunction templateObjForPlayers() {\n  const prototype = gameBoard();\n  const isReady = false;\n\n  return Object.assign(Object.create(prototype), {isReady});\n}\n\nconst Player = (() => {\n  let savedName = null;\n\n  return function () {\n    const name = savedName;\n    const prototype = templateObjForPlayers();\n\n    function setName(selectedName) {\n      savedName = selectedName;\n      this.name = selectedName;\n    }\n\n    return Object.assign(Object.create(prototype), {name, setName});\n  }\n})()\n\nconst Robot = () => {\n  const prototype = templateObjForPlayers();\n  const name = 'robot'\n\n  return Object.assign(Object.create(prototype), {name});\n}\n\nexport { Player, Robot }","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Player, Robot } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => {\n        Player().setName(e.target.value)}\n      } />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","function cloneObj(item) {\n  let cloneElem;\n\n  if (Array.isArray(item)) {\n    cloneElem = [];\n\n    for (const iterator of item) {\n      cloneElem.push(cloneObj(iterator));\n    }\n\n  } else if (typeof item === 'object' && item) {\n    let prototype = cloneObj(Object.getPrototypeOf(item));\n    cloneElem = Object.create(prototype);\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      }\n    }\n\n    /* cloneElem = Object.create(Object.getPrototypeOf(item));\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      } else {\n        console.log(Object.getPrototypeOf(item))\n      }\n    } */\n    /* for (const key in item) {\n      cloneElem[key] = cloneObj(item[key]);\n    } */\n  } else {\n    cloneElem = item;\n  }\n\n  return cloneElem;\n}\n\nexport default cloneObj;","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport cloneObj from \"../../../factoriesFunc/cloneObj\";\n\n\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.error.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isError, setIsError]       = useState(false);\n  const [isHover, setIsHover]       = useState(false);\n\n  //console.log('work')\n\n  const array = props.state.player.newShipsArray;\n  const player = props.state.player;\n\n  useEffect(() => {\n    if (player.hoveredCells.cellsArray.includes(props.index)) {\n      //console.log('work2')\n      if (player.hoveredCells.isValid) {\n        setIsHover(true);\n        setIsError(false);\n      } else {\n        setIsError(true);\n      }\n    } else {\n      setIsHover(false);\n      setIsError(false);\n      \n      for (const item of array) {\n        if (item.isPlaced) {\n          let condition = item.shipPart.find(elem => elem.coord === props.index)\n      \n          if (condition) {\n            setIsSelected(true);\n          }\n        }\n      }\n    }\n  })\n\n  function arrangeShips() {\n    //let cloneBoard = Object.assign(Object.create(Object.getPrototypeOf(props.state.player)), props.state.player);\n    let cloneBoard = cloneObj(props.state.player);\n    cloneBoard.placeShips(props.index);\n\n    //console.log()\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n    }\n    props.state.func(cloneBoard);\n  }\n\n  function shipHover() {\n    let cloneBoard = cloneObj(props.state.player);\n    \n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    console.log(cloneBoard)\n    props.state.func(cloneBoard);\n  }\n\n  return (\n    <Square \n    onClick={() => player.isReady || !props.isHuman ? null : arrangeShips()} \n    onMouseEnter={() => player.isReady || !props.isHuman ? null : shipHover()}\n    status={{key: isSelected}} error={{key: isError}} hover={{key: isHover}}>{props.index}</Square>\n  )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  //return false;\n  const nextPlayer = nextProps.state.player;\n  const prevPlayer = prevProps.state.player;\n\n  if (prevPlayer.hoveredCells.cellsArray.includes(nextProps.index) || nextPlayer.hoveredCells.cellsArray.includes(nextProps.index)) {\n    return false;\n  } else if (prevPlayer.isReady !== nextPlayer.isReady) {\n    return false\n  } else if (prevPlayer.orientation !== nextPlayer.orientation) {\n    return false;\n  } else if (sumNumbersInArray(prevPlayer.selectedCells) !== sumNumbersInArray(nextPlayer.selectedCells)) {\n    return false;\n  } else {\n    const array = prevPlayer.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction sumNumbersInArray(array) {\n  return array.reduce((prevVal, currVal) => prevVal + currVal, 0)\n}\n\nexport default Cell;","import React, { useState } from 'react';\nimport uniqid from 'uniqid';\n//import gameBoard from '../../../factoriesFunc/gameBoard';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport { useEffect } from 'react';\nimport cloneObj from '../../../factoriesFunc/cloneObj';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const state = {\n    player: props.player, \n    func: props.func\n  }\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => {\n      return <Cell key={id} index={id} state={state} isHuman={props.isHuman} />\n    });\n  }\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = cloneObj(props.player);\n        cloneState.changeOrientation();\n        props.func(cloneState);\n      }}>axis: {props.player.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  \n   /*  <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = Object.assign({}, board);\n        cloneState.changeOrientation();\n        setBoard(cloneState);\n      }}>axis: {board.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper> */\n  )\n}","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { Player, Robot } from \"../../factoriesFunc/player\";\nimport { useState } from \"react\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n  }\n`;\n\nexport default function Game() {\n  const [humanPlayer, setHumanPlayer] = useState(Player());\n  const [botPlayer, setBotPlayer] = useState(Robot());\n\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} func={setHumanPlayer} isHuman />\n        <Board player={botPlayer} func={setBotPlayer} />\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}