{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/cloneObj.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","images/refreshArrow.svg","components/componentsForMainContent/componentsForGame/gameOver.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","cloneObj","item","cloneElem","Array","isArray","iterator","push","prototype","Object","getPrototypeOf","key","create","hasOwnProperty","call","ship","shipPart","obj","isDamage","length","fill","map","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","placeShips","index","findElem","this","newShipsArray","find","hoveredCells","isValid","cellsArray","newArr","id","coord","selectedCells","addCellsIntoHoveredCells","name","destroyed","orientation","condition","i","includes","changeOrientation","attackedCells","templateObjForPlayers","isReady","getDamage","props","func","clone","state","player","requiredElem","isActive","isGameOver","isLose","Player","savedName","setName","selectedName","div","Regist","placeholder","onBlur","e","target","value","to","Square","error","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","setIsDamage","array","returnFuncForClick","isHuman","cloneBoard","arrangeShips","useEffect","coordOfAttack","onClick","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","prevPlayer","nextPlayer","sumNumbersInArray","reduce","prevVal","currVal","Cell","React","memo","Board","countRows","setCoordOfAttack","findShip","undefined","randomNumberGenerator","cloneState","minNumber","maxNumber","Math","round","random","GameOver","loserName","src","refreshArrow","uniqid","Game","humanPlayer","setHumanPlayer","Robot","botPlayer","setBotPlayer","setLoserName","useActiveStatus","args","MainContent","setKey","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEMA,EAAUC,IAAOC,OAAV,uIAUE,SAASC,IACtB,OACE,cAACH,EAAD,UACE,mBAAGI,KAAK,4BAAR,8BCbN,IAAMJ,EAAUC,IAAOI,OAAV,iFAMPC,EAAQL,IAAOM,GAAV,gFAMI,SAASC,EAAOC,GAC7B,OACE,cAAC,EAAD,UACE,cAACH,EAAD,2B,kBCSSI,MA1Bf,SAASA,EAASC,GAChB,IAAIC,EAEJ,GAAIC,MAAMC,QAAQH,GAAO,CACvBC,EAAY,GADW,oBAGAD,GAHA,IAGvB,2BAA6B,CAAC,IAAnBI,EAAkB,QAC3BH,EAAUI,KAAKN,EAASK,KAJH,oCAOlB,GAAoB,kBAATJ,GAAqBA,EAAM,CAC3C,IAAIM,EAAYP,EAASQ,OAAOC,eAAeR,IAG/C,IAAK,IAAMS,KAFXR,EAAYM,OAAOG,OAAOJ,GAERN,EACZO,OAAOI,eAAeC,KAAKZ,EAAMS,KACnCR,EAAUQ,GAAOV,EAASC,EAAKS,UAInCR,EAAYD,EAGd,OAAOC,G,gBCEMY,MAzBf,SAAcA,GACZ,IAAIC,EAgBN,SAAyBD,GACvB,IAAIE,EAAM,CACRC,UAAU,GAGZ,OAAO,IAAId,MAAMW,EAAKI,QAAQC,OAAOC,KAAI,kBAAMZ,OAAOa,OAAO,GAAIL,MArBlDM,CAAgBR,GAG/B,MAAO,CACLC,WACAQ,IAFK,SAEDC,GACFT,EAASS,GAAgBP,UAAW,GAEtCQ,OALK,WAOH,OADgBV,EAASW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,YAAUC,SAClCH,EAASG,QAEhCU,UAXa,ICyIFC,MAzIf,WA6HE,MAAO,CACLC,WA9EF,SAAoBC,GAAQ,IAAD,OACrBC,EAAWC,KAAKC,cAAcC,MAAK,SAAAR,GAAI,OAAKA,EAAKC,YAErD,GAAIK,KAAKG,aAAaC,SAAWJ,KAAKG,aAAaE,WAAWpB,OAAQ,CAAC,IAAD,EAC9DqB,EAASP,EAASjB,SAASK,KAAI,SAACO,EAAMa,GAAP,OAAcb,EAAKc,MAAQ,EAAKL,aAAaE,WAAWE,OAC7F,EAAAP,KAAKS,eAAcpC,KAAnB,oBAA2BiC,IAC3BP,EAASJ,UAAW,EACpBK,KAAKG,aAAaE,WAAa,QAE/BL,KAAKU,yBAAyBX,EAAUD,IAsE1CG,cAtHiB,CACjB,CACEU,KAAM,UACN1B,OAAQ,EACR2B,WAAW,GAEb,CACED,KAAM,aACN1B,OAAQ,EACR2B,WAAW,GAEb,CACED,KAAM,UACN1B,OAAQ,EACR2B,WAAW,GAEb,CACED,KAAM,YACN1B,OAAQ,EACR2B,WAAW,GAEb,CACED,KAAM,YACN1B,OAAQ,EACR2B,WAAW,IAIgBzB,KAAI,SAAAO,GACjC,OAAO,2BACFA,GACAb,EAAKa,OAwFVgB,yBAnEF,SAAkC7B,EAAMiB,GACtC,GAAyB,eAArBE,KAAKa,YACP,GAAIf,EAAQ,GAAKjB,EAAKI,QAAU,GAAI,CAGlC,IAFA,IAAI6B,GAAY,EAEPC,EAAIjB,EAAOiB,GAAKjB,EAAQjB,EAAKI,OAAQ8B,IAC5C,GAAIf,KAAKS,cAAcO,SAASD,GAAI,CAClCD,GAAY,EACZ,MAIAA,GACFd,KAAKG,aAAaE,WAAaxB,EAAKC,SAASK,KAAI,SAACO,EAAMa,GAAP,OAAcT,EAAQS,KACvEP,KAAKG,aAAaC,SAAU,IAE5BJ,KAAKG,aAAaE,WAAaxB,EAAKC,SAASK,KAAI,SAACO,EAAMa,GAAP,OAAcT,EAAQS,KACvEP,KAAKG,aAAaC,SAAU,OAEzB,CAELJ,KAAKG,aAAaE,WAAa,GAG/B,IAFA,IAAIE,EAAK,EAEFT,EAAQ,GAAKS,EAAK,IACvBP,KAAKG,aAAaE,WAAWhC,KAAKyB,EAAQS,KAG5CP,KAAKG,aAAaC,SAAU,OAEzB,GAAyB,aAArBJ,KAAKa,YACZ,GAAIf,GAAuB,GAAdjB,EAAKI,OAAc,KAAO,GAAI,CAIzC,IAFA,IAAI6B,GAAY,EAEPC,EAAIjB,EAAOiB,EAAIjB,EAAsB,GAAdjB,EAAKI,OAAa8B,GAAK,GACrD,GAAIf,KAAKS,cAAcO,SAASD,GAAI,CAClCD,GAAY,EACZ,MAIAA,GACFd,KAAKG,aAAaE,WAAaxB,EAAKC,SAASK,KAAI,SAACO,EAAMa,GAAP,OAAcT,EAAc,GAALS,KACxEP,KAAKG,aAAaC,SAAU,IAE5BJ,KAAKG,aAAaE,WAAaxB,EAAKC,SAASK,KAAI,SAACO,EAAMa,GAAP,OAAcT,EAAc,GAALS,KACxEP,KAAKG,aAAaC,SAAU,OAGzB,CAELJ,KAAKG,aAAaE,WAAa,GAG/B,IAFA,IAAIE,EAAK,EAEFT,EAAQS,GAAM,IACnBP,KAAKG,aAAaE,WAAWhC,KAAKyB,EAAQS,GAC1CA,GAAM,GAERP,KAAKG,aAAaC,SAAU,IASlCD,aA7HmB,CACnBE,WAAY,GACZD,SAAS,GA4HTK,cAhIoB,GAiIpBQ,kBAvFF,WACE,OAAOjB,KAAKa,YAAoC,aAArBb,KAAKa,YAA8B,aAAe,YAuF7EA,YAnIkB,aAoIlBK,cAlIoB,KCFxB,SAASC,IACP,IAAM7C,EAAYsB,IA6BlB,OAAOrB,OAAOa,OAAOb,OAAOG,OAAOJ,GAAY,CAAC8C,SA5BhC,EA4ByCC,UAxBzD,SAAmBC,EAAOC,GACxB,IAAMC,EAAQzD,EAASuD,EAAMG,OAG7B,GAFmBzB,KAAKS,cAAcO,SAASM,EAAMxB,OAGnD,IAAK,IAAIiB,EAAI,EAAGA,EAAIS,EAAME,OAAOzB,cAAchB,OAAQ8B,IAAK,CAC1D,IACIY,EADgBH,EAAME,OAAOzB,cAAcc,GAAGjC,SACjBoB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAUc,EAAMxB,SAEnE,GAAI6B,EAAc,CAChBH,EAAME,OAAOE,UAAW,EACxBD,EAAa3C,UAAW,EAExBsC,EAAMG,MAAMF,KAAKC,EAAME,QACvB,YAIJF,EAAME,OAAOE,UAAW,EACxBL,GAAK,GACLD,EAAMG,MAAMF,KAAKC,EAAME,SAIyCG,YA3BjD,EA2B6DC,QA1BjE,IA6BjB,I,IAAMC,EAAU,WACd,IAAIC,EAAY,KAEhB,OAAO,WACL,IAAM1D,EAAY6C,IACdR,EAAOqB,EAUX,OAAOzD,OAAOa,OAAOb,OAAOG,OAAOJ,GAAY,CAACqC,OAAMiB,UATrC,EAS+CK,QAPhE,SAAiBC,GACfvB,EAAOuB,EACPlC,KAAKW,KAAOA,EACZqB,EAAYE,EACZlC,KAAKW,KAAOuB,MAZF,GChCV7E,EAAUC,IAAO6E,IAAV,iaA4BE,SAASC,EAAOd,GAC7B,OACE,eAAC,EAAD,WACE,oDACA,uBAAOe,YAAY,SAASC,OAAQ,SAACC,GACnCR,IAASE,QAAQM,EAAEC,OAAOC,UAE5B,cAAC,IAAD,CAAMC,GAAG,YAAT,2BCnCN,IAAMC,EAASrF,IAAO6E,IAAV,4EACI,SAACb,GACb,OAAgC,IAAvBA,EAAMtC,SAASP,IAAiB,QAChC6C,EAAMsB,MAAMnE,KAAO6C,EAAMtC,SAASP,IAAO,MACzC6C,EAAMuB,OAAOpE,KAAO6C,EAAMwB,MAAMrE,IAAO,OAAxC,sBAOZ,SAASsE,EAAYzB,GACnB,MAAoC0B,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,mBAAS,MAA7C,mBAAOhE,EAAP,KAAiBuE,EAAjB,KAEM7B,EAASJ,EAAMG,MAAMC,OACrB8B,EAAQ9B,EAAOzB,cAsErB,SAASwD,IACP,OAAiB,OAAbzE,GAAqB0C,EAAOG,WACvB,KACEH,EAAON,SAAWM,EAAOE,SAC3BF,EAAOL,UAAUC,EAAOiC,GACtBjC,EAAMoC,UAAYhC,EAAON,QA3BtC,WACE,IAAIuC,EAAa5F,EAAS2D,GAC1BiC,EAAW9D,WAAWyB,EAAMxB,OAEb6D,EAAW1D,cAAcC,MAAK,SAAAR,GAAI,OAAKA,EAAKC,cAGzDgE,EAAWvC,SAAU,EACrBuC,EAAW/B,UAAW,GAExBN,EAAMG,MAAMF,KAAKoC,GAkBRC,QADF,EAKT,OA9EAC,qBAAU,WACR,GAAKnC,EAAON,SAuBV,GAAIM,EAAOjB,cAAcO,SAASM,EAAMxB,OAAQ,CAC9CoD,GAAc,GAEd,IAAK,IAAInC,EAAI,EAAGA,EAAIW,EAAOzB,cAAchB,OAAQ8B,IAAK,CACpD,IACIY,EADgBD,EAAOzB,cAAcc,GAAGjC,SACXoB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAUc,EAAMxB,SAEnE,GAAI6B,GAAgBA,EAAa3C,WAAaA,EAAU,CACtDuE,GAAY,GACZ,cA/BN,GAAI7B,EAAOvB,aAAaE,WAAWW,SAASM,EAAMxB,OAC5C4B,EAAOvB,aAAaC,SACtBkD,GAAW,GACXF,GAAW,IAEXA,GAAW,OAER,CACLE,GAAW,GACXF,GAAW,GAFN,oBAIcI,GAJd,IAIL,2BAA0B,CAAC,IAAhBxF,EAAe,QACxB,GAAIA,EAAK2B,SACS3B,EAAKc,SAASoB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAUc,EAAMxB,UAG9DoD,GAAc,IATf,mCA+BXW,qBAAU,WACJvC,EAAMwC,eACRpC,EAAOL,UAAUC,EAAOiC,KAEzB,CAACjC,EAAMwC,gBAmCR,cAACnB,EAAD,CACAoB,QAAS,kBAAMN,KACfO,aAAc,kBAAMtC,EAAON,UAAYE,EAAMoC,QAAU,KAtBzD,WACE,IAAIC,EAAa5F,EAAS2D,GAEtB3B,EAAW4D,EAAW1D,cAAcC,MAAK,SAAAR,GAAI,OAAKA,EAAKC,YAE3DgE,EAAWjD,yBAAyBX,EAAUuB,EAAMxB,OACpDwB,EAAMG,MAAMF,KAAKoC,GAgB6CM,IAC9DpB,OAAQ,CAACpE,IAAKwE,GAAaL,MAAO,CAACnE,IAAK0E,GAAUnE,SAAU,CAACP,IAAKO,GAAW8D,MAAO,CAACrE,IAAK4E,GAH1F,SAGqG/B,EAAMxB,QAI/G,SAASoE,EAAkBC,EAAWC,GACpC,IAAMC,EAAaF,EAAU1C,MAAMC,OAC7B4C,EAAaF,EAAU3C,MAAMC,OAEnC,GAAI0C,EAAUN,cACZ,OAAO,EACF,GAAIO,EAAWlE,aAAaE,WAAWW,SAASoD,EAAUtE,QAAUwE,EAAWnE,aAAaE,WAAWW,SAASoD,EAAUtE,OAC/H,OAAO,EACF,GAAIuE,EAAWjD,UAAYkD,EAAWlD,SAAWiD,EAAWzC,WAAa0C,EAAW1C,SACzF,OAAO,EACF,GAAIyC,EAAWxD,cAAgByD,EAAWzD,YAC/C,OAAO,EACF,GAAI0D,EAAkBF,EAAW5D,iBAAmB8D,EAAkBD,EAAW7D,eACtF,OAAO,EAEP,IADK,EACC+C,EAAQa,EAAWpE,cADpB,cAGcuD,GAHd,IAGL,2BAA0B,CAAC,IAAhBxF,EAAe,QACxB,GAAIA,EAAK2B,SAGP,GAFgB3B,EAAKc,SAASoB,MAAK,SAAAR,GAAI,OAAIA,EAAKc,QAAU4D,EAAUtE,SAGlE,OAAO,GARR,8BAaP,OAAO,EAGT,SAASyE,EAAkBf,GACzB,OAAOA,EAAMgB,QAAO,SAACC,EAASC,GAAV,OAAsBD,EAAUC,IAAS,GAGhDC,I,EAAAA,EAnIFC,IAAMC,KAAK9B,EAAYmB,G,QCP9B7G,EAAUC,IAAO6E,IAAV,mPAeE,SAAS2C,EAAMxD,GAC5B,IAO6ByD,EAP7B,EAA0C/B,mBAAS,MAAnD,mBAAOc,EAAP,KAAsBkB,EAAtB,KAEMvD,EAAQ,CACZC,OAAQJ,EAAMI,OACdH,KAAMD,EAAMC,MAkEd,OAtDAsC,qBAAU,WACR,GAA0B,UAAtBvC,EAAMI,OAAOf,KAIf,IAHA,IAAIa,EAAQzD,EAASuD,EAAMI,QACvBuD,EAAWzD,EAAMvB,cAAcC,MAAK,SAAAR,GAAI,OAAKA,EAAKC,iBAElCuF,IAAbD,GACLzD,EAAMX,YAAc,CAAC,WAAY,cAAcsE,EAAsB,EAAG,IACxE3D,EAAMd,yBAAyBuE,EAAUE,EAAsB,EAAG,MAClE3D,EAAM3B,aACN2B,EAAMJ,SAAU,EAChB6D,EAAWzD,EAAMvB,cAAcC,MAAK,SAAAR,GAAI,OAAKA,EAAKC,YAClD2B,EAAMC,KAAKC,KAGd,IAEHqC,qBAAU,WACR,GAAIvC,EAAMoC,SAAWpC,EAAMI,OAAOE,UAAYN,EAAMI,OAAON,QAAS,CAClE,IAAII,EAAQzD,EAASuD,EAAMI,QACvBlB,EAAQ2E,EAAsB,EAAG,KAErC,GAAI3D,EAAMN,cAAcF,SAASR,GAC/B,MAA+C,IAAxCgB,EAAMN,cAAcF,SAASR,IAClCA,EAAQ2E,EAAsB,EAAG,KAIrCH,EAAiBxE,GACjBgB,EAAMN,cAAc7C,KAAKmC,GACzBc,EAAMC,KAAKC,MAEZ,CAACF,EAAMI,OAAOE,WAEjBiC,qBAAU,WACR,IADc,EACVrC,EAAQzD,EAASuD,EAAMI,QADb,cAGKF,EAAMvB,eAHX,IAGd,2BAAwC,CAAC,IAA9BP,EAA6B,QACzBA,EAAKZ,SAASW,QAAO,SAAAC,GAAI,OAAsB,IAAlBA,EAAKV,YAEpCC,SAAWS,EAAKT,SACzBS,EAAKkB,WAAY,IAPP,8BAWd,IAAMnB,EAAS+B,EAAMvB,cAAcC,MAAK,SAAAR,GAAI,OAAuB,IAAnBA,EAAKkB,aAC/CtC,EAAYC,OAAOC,eAAegD,GAEnC/B,GAAWnB,EAAUuD,aACxBvD,EAAUuD,YAAa,EACvBL,EAAMM,QAAS,EACfR,EAAMC,KAAKC,OAKb,eAAC,EAAD,WACIF,EAAMoC,QAAW,yBAAQK,QAAS,WAClC,IAAIqB,EAAarH,EAASuD,EAAMI,QAChC0D,EAAWnE,oBACXK,EAAMC,KAAK6D,IAHM,mBAIoB,eAA7B9D,EAAMI,OAAOb,YAA+B,IAAM,OAAgB,KAC5E,+BAtEyBkE,EAuEF,IAtElB,IAAI7G,MAAM6G,GAAW7F,OAAOC,KAAI,SAACO,EAAMa,GAC5C,OAAIA,IAAOuD,EACF,cAAC,EAAD,CAAehE,MAAOS,EAAIkB,MAAOA,EAAOiC,QAASpC,EAAMoC,QAASI,eAAe,GAApEvD,GAEb,cAAC,EAAD,CAAeT,MAAOS,EAAIkB,MAAOA,EAAOiC,QAASpC,EAAMoC,QAASI,eAAe,GAApEvD,YAwExB,SAAS4E,EAAsBE,EAAWC,GACxC,OAAOC,KAAKC,MAAMH,GAAaC,EAAYD,EAAY,GAAKE,KAAKE,SAAW,IAAO,EC3GtE,I,EAAA,MAA0B,yC,iBCInCpI,EAAUC,IAAO6E,IAAV,kTA2BEuD,I,IAAAA,EAVf,SAAkBpE,GAChB,OACE,eAAC,EAAD,WACE,4CACA,8BAAMA,EAAMqE,UAAN,WACN,qBAAKC,IAAKC,EAAc9B,QAAS,kBAAMzC,EAAMC,KAAKuE,cCnBlDzI,EAAUC,IAAO6E,IAAV,mIAQE,SAAS4D,EAAKzE,GAC3B,MAAsC0B,mBAASjB,KAA/C,mBAAOiE,EAAP,KAAoBC,EAApB,KACA,EAAkCjD,mBNsCtB,WACZ,IAAM1E,EAAY6C,IAIlB,OAAO5C,OAAOa,OAAOb,OAAOG,OAAOJ,GAAY,CAACqC,KAHnC,QAGyCiB,UAFrC,IMzC0BsE,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCpD,mBAAS,MAA3C,mBAAO2C,EAAP,KAAkBU,EAAlB,KAiBA,OAfAC,EAAgBH,EAAW,CAACH,EAAaC,IACzCK,EAAgBN,EAAa,CAACG,EAAWC,IAEzCvC,qBAAU,WACR,GAAIsC,EAAUtE,WAAY,CACxB,IAAIL,EAAQzD,EAASoI,GACrBC,EAAa5E,GACb6E,EAAa7E,EAAMb,WACd,GAAIqF,EAAYnE,WAAY,CACjC,IAAIL,EAAQzD,EAASiI,GACrBI,EAAa5E,GACb6E,EAAa7E,EAAMb,SAEpB,CAACwF,EAAUtE,WAAYmE,EAAYnE,aAGpC,cAAC,EAAD,UACE,sBAAKtB,GAAG,aAAR,UACE,cAACuE,EAAD,CAAOpD,OAAQsE,EAAazE,KAAM0E,EAAgBvC,SAAO,IACzD,cAACoB,EAAD,CAAOpD,OAAQyE,EAAW5E,KAAM6E,IAC9BJ,EAAYnE,YAAcsE,EAAUtE,WACpC,cAAC,EAAD,CAAUN,KAAMD,EAAMC,KAAMoE,UAAWA,IACvC,UAMV,SAASW,EAAgBvH,EAAKwH,GAC5B1C,qBAAU,WACR,IAAK9E,EAAI6C,SAAU,CACjB,IAAIJ,EAAQzD,EAASwI,EAAK,IAC1B/E,EAAMI,UAAW,EACjB2E,EAAK,GAAG/E,MAET,CAACzC,EAAI6C,WClDK,SAAS4E,GAAYlF,GAClC,MAAsB0B,mBAAS8C,OAA/B,mBAAOrH,EAAP,KAAYgI,EAAZ,KAEA,MACkB,iBAAfnF,EAAMoF,KAA2B,cAACtE,EAAD,IAAa,cAAC2D,EAAD,CAAgBxE,KAAMkF,GAAXhI,GCJ9D,IAAMkI,GAAUrJ,IAAOsJ,QAAV,+FAME,SAASC,GAAiB/I,GACvC,OACE,eAAC6I,GAAD,WACE,cAAC9I,EAAD,IACA,cAAC2I,GAAD,CAAaE,KAAM,iBACnB,cAAClJ,EAAD,OCFSsJ,OAVf,SAAkBhJ,GAChB,OACE,oCACE,cAACD,EAAD,IACA,cAAC2I,GAAD,IACA,cAAChJ,EAAD,QCMSuJ,OAXf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,KACjC,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAWJ,W,MCHjDK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.57b07857.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function cloneObj(item) {\n  let cloneElem;\n\n  if (Array.isArray(item)) {\n    cloneElem = [];\n\n    for (const iterator of item) {\n      cloneElem.push(cloneObj(iterator));\n    }\n\n  } else if (typeof item === 'object' && item) {\n    let prototype = cloneObj(Object.getPrototypeOf(item));\n    cloneElem = Object.create(prototype);\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        cloneElem[key] = cloneObj(item[key]);\n      }\n    }\n  } else {\n    cloneElem = item;\n  }\n\n  return cloneElem;\n}\n\nexport default cloneObj;","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const attackedCells = [];\n  const hoveredCells = {\n    cellsArray: [],\n    isValid: true,\n  }\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n      destroyed: false,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n      destroyed: false,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n      destroyed: false,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n      destroyed: false,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n      destroyed: false,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips(index) {\n    let findElem = this.newShipsArray.find(elem => !elem.isPlaced);\n\n    if (this.hoveredCells.isValid && this.hoveredCells.cellsArray.length) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells.cellsArray[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n      this.hoveredCells.cellsArray = [];\n    } else {\n      this.addCellsIntoHoveredCells(findElem, index);\n    }\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    if (this.orientation === 'horizontal') {\n      if (index % 10 + ship.length <= 10) {\n        let condition = true;\n\n        for (let i = index; i <= index + ship.length; i++) {\n          if (this.selectedCells.includes(i)) {\n            condition = false;\n            break;\n          }\n        }\n\n        if (condition) {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = true;\n        } else {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = false;\n        }\n      } else {\n\n        this.hoveredCells.cellsArray = [];\n        let id = 0;\n\n        while (index % 10 + id < 10) {\n          this.hoveredCells.cellsArray.push(index + id++);\n        }\n        \n        this.hoveredCells.isValid = false;\n      }\n    } else if (this.orientation === 'vertical') {\n        if (index + (ship.length * 10 - 10) <= 99) {\n\n          let condition = true;\n\n          for (let i = index; i < index + ship.length * 10; i += 10) {\n            if (this.selectedCells.includes(i)) {\n              condition = false;\n              break;\n            }\n          }\n\n          if (condition) {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = true;\n          } else {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = false;\n          }\n\n        } else {\n\n          this.hoveredCells.cellsArray = [];\n          let id = 0;\n\n          while (index + id <= 99) {\n            this.hoveredCells.cellsArray.push(index + id);\n            id += 10;\n          }\n          this.hoveredCells.isValid = false;\n        }\n    } \n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    changeOrientation,\n    orientation,\n    attackedCells,\n  }\n}\n\nexport default gameBoard;","import cloneObj from \"./cloneObj\";\nimport gameBoard from \"./gameBoard\";\n\nfunction templateObjForPlayers() {\n  const prototype = gameBoard();\n  const isReady = false;\n  const isGameOver = false;\n  const isLose = false;\n\n  function getDamage(props, func) {\n    const clone = cloneObj(props.state);\n    const checkCoord = this.selectedCells.includes(props.index);\n\n    if (checkCoord) {\n      for (let i = 0; i < clone.player.newShipsArray.length; i++) {\n        let shipPartArray = clone.player.newShipsArray[i].shipPart;\n        let requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n        if (requiredElem) {\n          clone.player.isActive = false;\n          requiredElem.isDamage = true;\n\n          props.state.func(clone.player);\n          break;\n        }\n      }\n    } else {\n      clone.player.isActive = false;\n      func(false);\n      props.state.func(clone.player);\n    }\n  }\n\n  return Object.assign(Object.create(prototype), {isReady, getDamage, isGameOver, isLose});\n}\n\nconst Player = (() => {\n  let savedName = null;\n\n  return function () {\n    const prototype = templateObjForPlayers();\n    let name = savedName;\n    const isActive = true;\n\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n      savedName = selectedName;\n      this.name = selectedName;\n    }\n\n    return Object.assign(Object.create(prototype), {name, isActive, setName});\n  }\n})()\n\nconst Robot = () => {\n  const prototype = templateObjForPlayers();\n  const name = 'robot';\n  const isActive = false;\n\n  return Object.assign(Object.create(prototype), {name, isActive});\n}\n\nexport { Player, Robot }","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Player, Robot } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => {\n        Player().setName(e.target.value)}\n      } />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport cloneObj from \"../../../factoriesFunc/cloneObj\";\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.isDamage.key === false) ? 'green' :\n            (props.error.key || props.isDamage.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isError, setIsError]       = useState(false);\n  const [isHover, setIsHover]       = useState(false);\n  const [isDamage, setIsDamage]     = useState(null);\n\n  const player = props.state.player;\n  const array = player.newShipsArray;\n\n  useEffect(() => {\n    if (!player.isReady) {\n      if (player.hoveredCells.cellsArray.includes(props.index)) {\n        if (player.hoveredCells.isValid) {\n          setIsHover(true);\n          setIsError(false);\n        } else {\n          setIsError(true);\n        }\n      } else {\n        setIsHover(false);\n        setIsError(false);\n        \n        for (const item of array) {\n          if (item.isPlaced) {\n            let condition = item.shipPart.find(elem => elem.coord === props.index)\n        \n            if (condition) {\n              setIsSelected(true);\n            }\n          }\n        }\n      }\n    } else {\n      if (player.selectedCells.includes(props.index)) {\n        setIsSelected(true);\n\n        for (let i = 0; i < player.newShipsArray.length; i++) {\n          let shipPartArray = player.newShipsArray[i].shipPart;\n          let requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n          if (requiredElem && requiredElem.isDamage && !isDamage) {\n            setIsDamage(true);\n            break\n          }\n        }\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (props.coordOfAttack) {\n      player.getDamage(props, setIsDamage);\n    }\n  }, [props.coordOfAttack])\n\n  function arrangeShips() {\n    let cloneBoard = cloneObj(player);\n    cloneBoard.placeShips(props.index);\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n      cloneBoard.isActive = false;\n    }\n    props.state.func(cloneBoard);\n  }\n\n  function shipHover() {\n    let cloneBoard = cloneObj(player);\n    \n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    props.state.func(cloneBoard);\n  }\n\n  function returnFuncForClick() {\n    if (isDamage !== null || player.isGameOver) {\n      return null;\n    } else if (player.isReady && player.isActive) {\n      return player.getDamage(props, setIsDamage);\n    } else if (props.isHuman && !player.isReady) {\n      return arrangeShips();\n    }\n  }\n\n  return (\n    <Square \n    onClick={() => returnFuncForClick()} \n    onMouseEnter={() => player.isReady || !props.isHuman ? null : shipHover()}\n    status={{key: isSelected}} error={{key: isError}} isDamage={{key: isDamage}} hover={{key: isHover}}>{props.index}</Square>\n  )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  const prevPlayer = prevProps.state.player;\n  const nextPlayer = nextProps.state.player;\n\n  if (nextProps.coordOfAttack) {\n    return false;\n  } else if (prevPlayer.hoveredCells.cellsArray.includes(nextProps.index) || nextPlayer.hoveredCells.cellsArray.includes(nextProps.index)) {\n    return false;\n  } else if (prevPlayer.isReady !== nextPlayer.isReady || prevPlayer.isActive !== nextPlayer.isActive) {\n    return false\n  } else if (prevPlayer.orientation !== nextPlayer.orientation) {\n    return false;\n  } else if (sumNumbersInArray(prevPlayer.selectedCells) !== sumNumbersInArray(nextPlayer.selectedCells)) {\n    return false;\n  } else {\n    const array = prevPlayer.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction sumNumbersInArray(array) {\n  return array.reduce((prevVal, currVal) => prevVal + currVal, 0)\n}\n\nexport default Cell;","import React from 'react';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport cloneObj from '../../../factoriesFunc/cloneObj';\nimport { useEffect, useState } from 'react/cjs/react.development';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const [coordOfAttack, setCoordOfAttack] = useState(null);\n\n  const state = {\n    player: props.player, \n    func: props.func\n  }\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => {\n      if (id === coordOfAttack) {\n        return <Cell key={id} index={id} state={state} isHuman={props.isHuman} coordOfAttack={true} />\n      }\n      return <Cell key={id} index={id} state={state} isHuman={props.isHuman} coordOfAttack={false} />\n    });\n  }\n\n  useEffect(() => {\n    if (props.player.name === 'robot') {\n      let clone = cloneObj(props.player);\n      let findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n\n      while (findShip !== undefined) {\n        clone.orientation = ['vertical', 'horizontal'][randomNumberGenerator(1, 2)];\n        clone.addCellsIntoHoveredCells(findShip, randomNumberGenerator(1, 100));\n        clone.placeShips();\n        clone.isReady = true;\n        findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n        props.func(clone);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (props.isHuman && props.player.isActive && props.player.isReady) {\n      let clone = cloneObj(props.player);\n      let coord = randomNumberGenerator(1, 100);\n\n      if (clone.attackedCells.includes(coord)) {\n        while (clone.attackedCells.includes(coord) === true) {\n          coord = randomNumberGenerator(1, 100);\n        }\n      }\n\n      setCoordOfAttack(coord);\n      clone.attackedCells.push(coord);\n      props.func(clone)\n    }\n  }, [props.player.isActive]);\n\n  useEffect(() => {\n    let clone = cloneObj(props.player);\n\n    for (const elem of clone.newShipsArray) {\n      let filter = elem.shipPart.filter(elem => elem.isDamage === true);\n\n      if (filter.length === elem.length) {\n        elem.destroyed = true;\n      }\n    }\n\n    const filter = clone.newShipsArray.find(elem => elem.destroyed === false);\n    const prototype = Object.getPrototypeOf(clone);\n\n    if (!filter && !prototype.isGameOver) {\n      prototype.isGameOver = true;\n      clone.isLose = true;\n      props.func(clone);\n    }\n  })\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = cloneObj(props.player);\n        cloneState.changeOrientation();\n        props.func(cloneState);\n      }}>axis: {props.player.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  )\n}\n\nfunction randomNumberGenerator(minNumber, maxNumber) {\n  return Math.round(minNumber + (maxNumber - minNumber + 1) * Math.random() - 0.5) - 1; \n}","export default __webpack_public_path__ + \"static/media/refreshArrow.edb31e23.svg\";","import styled from \"styled-components\";\nimport refreshArrow from \"../../../images/refreshArrow.svg\";\nimport uniqid from \"uniqid\";\n\nconst Wrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: rgba(135, 99, 99, 0.5);\n  font-weight: 900;\n  color: white;\n\n  h1 {\n    text-shadow: 0 0 6px black;\n  }\n`\n\nfunction GameOver(props) {\n  return (\n    <Wrapper>\n      <h1>Game over!</h1>\n      <div>{props.loserName + ` lost!`}</div>\n      <img src={refreshArrow} onClick={() => props.func(uniqid())} />\n</Wrapper>\n  )\n}\n\nexport default GameOver;","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { Player, Robot } from \"../../factoriesFunc/player\";\nimport { useEffect, useState } from \"react\";\nimport cloneObj from \"../../factoriesFunc/cloneObj\";\nimport GameOver from \"./componentsForGame/gameOver\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n    position: relative;\n  }\n`;\n\nexport default function Game(props) {\n  const [humanPlayer, setHumanPlayer] = useState(Player());\n  const [botPlayer, setBotPlayer] = useState(Robot());\n  const [loserName, setLoserName] = useState(null);\n\n  useActiveStatus(botPlayer, [humanPlayer, setHumanPlayer]);\n  useActiveStatus(humanPlayer, [botPlayer, setBotPlayer]);\n\n  useEffect(() => {\n    if (botPlayer.isGameOver) {\n      let clone = cloneObj(botPlayer);\n      setBotPlayer(clone)\n      setLoserName(clone.name);\n    } else if (humanPlayer.isGameOver) {\n      let clone = cloneObj(humanPlayer);\n      setBotPlayer(clone);\n      setLoserName(clone.name);\n    }\n  }, [botPlayer.isGameOver, humanPlayer.isGameOver])\n\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} func={setHumanPlayer} isHuman />\n        <Board player={botPlayer} func={setBotPlayer} />\n        {(humanPlayer.isGameOver || botPlayer.isGameOver) \n        ? <GameOver func={props.func} loserName={loserName} /> \n        : null}\n      </div>\n    </Wrapper>\n  )\n}\n\nfunction useActiveStatus(obj, args) {\n  useEffect(() => {\n    if (!obj.isActive) {\n      let clone = cloneObj(args[0]);\n      clone.isActive = true;\n      args[1](clone);\n    }\n  }, [obj.isActive])\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\nimport { useState } from \"react\";\nimport uniqid from \"uniqid\";\n\nexport default function MainContent(props) {\n  const [key, setKey] = useState(uniqid());\n\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game key={key} func={setKey} />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}