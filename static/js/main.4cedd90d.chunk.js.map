{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/cloneObj.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","cloneObj","item","cloneElem","Array","isArray","iterator","push","prototype","Object","getPrototypeOf","key","create","hasOwnProperty","call","ship","shipPart","obj","isDamage","length","fill","map","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","placeShips","index","findElem","this","newShipsArray","find","hoveredCells","isValid","cellsArray","newArr","id","coord","selectedCells","addCellsIntoHoveredCells","name","orientation","condition","i","includes","changeOrientation","templateObjForPlayers","isReady","getDamage","props","func","clone","state","requiredElem","player","isActive","Player","savedName","setName","selectedName","div","Regist","placeholder","onBlur","e","target","value","to","Square","error","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","setIsDamage","array","returnFuncForClick","isHuman","cloneBoard","arrangeShips","useEffect","coordOfAttack","onClick","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","prevPlayer","nextPlayer","sumNumbersInArray","reduce","prevVal","currVal","Cell","React","memo","Board","findShip","undefined","randomNumberGenerator","countRows","setCoordOfAttack","cloneState","minNumber","maxNumber","Math","round","random","Game","humanPlayer","setHumanPlayer","Robot","botPlayer","setBotPlayer","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cedd90d.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function cloneObj(item) {\n  let cloneElem;\n\n  if (Array.isArray(item)) {\n    cloneElem = [];\n\n    for (const iterator of item) {\n      cloneElem.push(cloneObj(iterator));\n    }\n\n  } else if (typeof item === 'object' && item) {\n    let prototype = cloneObj(Object.getPrototypeOf(item));\n    cloneElem = Object.create(prototype);\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        cloneElem[key] = cloneObj(item[key]);\n      }\n    }\n  } else {\n    cloneElem = item;\n  }\n\n  return cloneElem;\n}\n\nexport default cloneObj;","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const hoveredCells = {\n    cellsArray: [],\n    isValid: true,\n  }\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips(index) {\n    let findElem = this.newShipsArray.find(elem => !elem.isPlaced);\n\n    if (this.hoveredCells.isValid && this.hoveredCells.cellsArray.length) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells.cellsArray[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n      this.hoveredCells.cellsArray = [];\n    } else {\n      this.addCellsIntoHoveredCells(findElem, index);\n    }\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    if (this.orientation === 'horizontal') {\n      if (index % 10 + ship.length <= 10) {\n        let condition = true;\n\n        for (let i = index; i <= index + ship.length; i++) {\n          if (this.selectedCells.includes(i)) {\n            condition = false;\n            break;\n          }\n        }\n\n        if (condition) {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = true;\n        } else {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = false;\n        }\n      } else {\n\n        this.hoveredCells.cellsArray = [];\n        let id = 0;\n\n        while (index % 10 + id < 10) {\n          this.hoveredCells.cellsArray.push(index + id++);\n        }\n        \n        this.hoveredCells.isValid = false;\n      }\n    } else if (this.orientation === 'vertical') {\n        if (index + (ship.length * 10 - 10) <= 99) {\n\n          let condition = true;\n\n          for (let i = index; i < index + ship.length * 10; i += 10) {\n            if (this.selectedCells.includes(i)) {\n              condition = false;\n              break;\n            }\n          }\n\n          if (condition) {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = true;\n          } else {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = false;\n          }\n\n        } else {\n\n          this.hoveredCells.cellsArray = [];\n          let id = 0;\n\n          while (index + id <= 99) {\n            this.hoveredCells.cellsArray.push(index + id);\n            id += 10;\n          }\n          this.hoveredCells.isValid = false;\n        }\n    } \n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    changeOrientation,\n    orientation,\n  }\n}\n\nexport default gameBoard;","import cloneObj from \"./cloneObj\";\nimport gameBoard from \"./gameBoard\";\n\nfunction templateObjForPlayers() {\n  const prototype = gameBoard();\n  const isReady = false;\n\n  function getDamage(props, func) {\n    const clone = cloneObj(props.state);\n    const checkCoord = this.selectedCells.includes(props.index);\n\n    if (checkCoord) {\n      let requiredElem = null;\n      for (let i = 0; i < clone.player.newShipsArray.length; i++) {\n        let shipPartArray = clone.player.newShipsArray[i].shipPart;\n        requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n        if (requiredElem) {\n          clone.player.isActive = false;\n          requiredElem.isDamage = true;\n          props.state.func(clone.player);\n          break\n        }\n      }\n    } else {\n      clone.player.isActive = false;\n      func(false);\n      props.state.func(clone.player);\n    }\n  }\n\n  /* function getDamageFromBot(props, index) {\n    const clone = cloneObj(props);\n    const checkCoord = this.selectedCells.includes(index);\n\n    if (checkCoord) {\n      let requiredElem = null;\n      for (let i = 0; i < clone.player.newShipsArray.length; i++) {\n        let shipPartArray = clone.player.newShipsArray[i].shipPart;\n        requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n        if (requiredElem) {\n          clone.player.isActive = false;\n          requiredElem.isDamage = true;\n          props.state.func(clone.player);\n          break\n        }\n      }\n    } else {\n      clone.player.isActive = false;\n      props.func(false);\n      props.state.func(clone.player);\n    }\n  } */\n\n  return Object.assign(Object.create(prototype), {isReady, getDamage});\n}\n\nconst Player = (() => {\n  let savedName = null;\n\n  return function () {\n    const prototype = templateObjForPlayers();\n    let name = savedName;\n    const isActive = true;\n\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n      savedName = selectedName;\n      this.name = selectedName;\n    }\n\n    return Object.assign(Object.create(prototype), {name, isActive, setName});\n  }\n})()\n\nconst Robot = () => {\n  const prototype = templateObjForPlayers();\n  const name = 'robot';\n  const isActive = false;\n\n  return Object.assign(Object.create(prototype), {name, isActive});\n}\n\nexport { Player, Robot }","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Player, Robot } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => {\n        Player().setName(e.target.value)}\n      } />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport cloneObj from \"../../../factoriesFunc/cloneObj\";\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.isDamage.key === false) ? 'green' :\n            (props.error.key || props.isDamage.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n    /* (props.error.key || props.isDamage.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)` */\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isError, setIsError]       = useState(false);\n  const [isHover, setIsHover]       = useState(false);\n  const [isDamage, setIsDamage]     = useState(null);\n\n  const player = props.state.player;\n  const array = player.newShipsArray;\n\n  useEffect(() => {\n    if (!player.isReady) {\n      if (player.hoveredCells.cellsArray.includes(props.index)) {\n        if (player.hoveredCells.isValid) {\n          setIsHover(true);\n          setIsError(false);\n        } else {\n          setIsError(true);\n        }\n      } else {\n        setIsHover(false);\n        setIsError(false);\n        \n        for (const item of array) {\n          if (item.isPlaced) {\n            let condition = item.shipPart.find(elem => elem.coord === props.index)\n        \n            if (condition) {\n              setIsSelected(true);\n            }\n          }\n        }\n      }\n    } else {\n      if (player.selectedCells.includes(props.index)) {\n        setIsSelected(true);\n\n        let requiredElem = null;\n        for (let i = 0; i < player.newShipsArray.length; i++) {\n          let shipPartArray = player.newShipsArray[i].shipPart;\n          requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n          if (requiredElem && requiredElem.isDamage && !isDamage) {\n            setIsDamage(true);\n            break\n          }\n        }\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (props.coordOfAttack) {\n      player.getDamage(props, setIsDamage);\n    }\n  }, [props.coordOfAttack])\n\n  function arrangeShips() {\n    let cloneBoard = cloneObj(player);\n    cloneBoard.placeShips(props.index);\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n      cloneBoard.isActive = false;\n    }\n    props.state.func(cloneBoard);\n  }\n  \n  //console.log('work')\n\n  function shipHover() {\n    let cloneBoard = cloneObj(player);\n    \n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    props.state.func(cloneBoard);\n  }\n\n  function returnFuncForClick() {\n    if (player.isReady && player.isActive) {\n      return player.getDamage(props, setIsDamage);\n    } else if (props.isHuman && !player.isReady) {\n      return arrangeShips();\n    }\n  }\n\n  return (\n    <Square \n    onClick={() => returnFuncForClick()} \n    onMouseEnter={() => player.isReady || !props.isHuman ? null : shipHover()}\n    status={{key: isSelected}} error={{key: isError}} isDamage={{key: isDamage}} hover={{key: isHover}}>{props.index}</Square>\n  )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  const prevPlayer = prevProps.state.player;\n  const nextPlayer = nextProps.state.player;\n\n  if (nextProps.coordOfAttack) {\n    return false;\n  } else if (prevPlayer.hoveredCells.cellsArray.includes(nextProps.index) || nextPlayer.hoveredCells.cellsArray.includes(nextProps.index)) {\n    return false;\n  } else if (prevPlayer.isReady !== nextPlayer.isReady || prevPlayer.isActive !== nextPlayer.isActive) {\n    return false\n  } else if (prevPlayer.orientation !== nextPlayer.orientation) {\n    return false;\n  } else if (sumNumbersInArray(prevPlayer.selectedCells) !== sumNumbersInArray(nextPlayer.selectedCells)) {\n    return false;\n  } else {\n    const array = prevPlayer.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction sumNumbersInArray(array) {\n  return array.reduce((prevVal, currVal) => prevVal + currVal, 0)\n}\n\nexport default Cell;","import React from 'react';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport cloneObj from '../../../factoriesFunc/cloneObj';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport iniqid from 'uniqid';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const state = {\n    player: props.player, \n    func: props.func\n  }\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => {\n      if (id === coordOfAttack) {\n        return <Cell key={id} index={id} state={state} isHuman={props.isHuman} coordOfAttack={true} />\n      }\n      return <Cell key={id} index={id} state={state} isHuman={props.isHuman} coordOfAttack={false} />\n    });\n  }\n\n  useEffect(() => {\n    if (props.player.name === 'robot') {\n      let clone = cloneObj(props.player);\n      let findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n\n      while (findShip !== undefined) {\n        clone.orientation = ['vertical', 'horizontal'][randomNumberGenerator(1, 2)];\n        clone.addCellsIntoHoveredCells(findShip, randomNumberGenerator(1, 100));\n        clone.placeShips();\n        clone.isReady = true;\n        findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n        props.func(clone);\n      }\n    }\n  }, []);\n\n  const [coordOfAttack, setCoordOfAttack] = useState(null);\n\n  useEffect(() => {\n    if (props.isHuman && props.player.isActive && props.player.isReady) {\n      //setCoordOfAttack(randomNumberGenerator(1, 100));\n      setCoordOfAttack(50);\n    }\n  }, [props.player.isActive])\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = cloneObj(props.player);\n        cloneState.changeOrientation();\n        props.func(cloneState);\n      }}>axis: {props.player.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  )\n}\n\nfunction randomNumberGenerator(minNumber, maxNumber) {\n  return Math.round(minNumber + (maxNumber - minNumber + 1) * Math.random() - 0.5) - 1; \n}","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { Player, Robot } from \"../../factoriesFunc/player\";\nimport { useEffect, useState } from \"react\";\nimport cloneObj from \"../../factoriesFunc/cloneObj\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n  }\n`;\n\nexport default function Game() {\n  const [humanPlayer, setHumanPlayer] = useState(Player());\n  const [botPlayer, setBotPlayer] = useState(Robot());\n\n  useEffect(() => {\n    if (!humanPlayer.isActive) {\n      let clone = cloneObj(botPlayer);\n      clone.isActive = true;\n      setBotPlayer(clone);\n    }\n  }, [humanPlayer.isActive]);\n\n  useEffect(() => {\n    if (!botPlayer.isActive) {\n      let clone = cloneObj(humanPlayer);\n      clone.isActive = true;\n      setHumanPlayer(clone);\n    }\n  }, [botPlayer.isActive]);\n\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} func={setHumanPlayer} isHuman />\n        <Board player={botPlayer} func={setBotPlayer} />\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}