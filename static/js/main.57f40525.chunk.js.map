{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","factoriesFunc/cloneObj.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","ship","shipPart","obj","isDamage","Array","length","fill","map","Object","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","placeShips","findElem","this","newShipsArray","find","hoveredCells","isValid","newArr","id","coord","cellsArray","selectedCells","push","name","addCellsIntoHoveredCells","index","orientation","condition","i","console","log","includes","changeOrientation","templateObjForPlayers","prototype","create","isReady","Player","savedName","isActive","setName","selectedName","Robot","div","Regist","props","placeholder","onBlur","e","target","value","to","cloneObj","item","cloneElem","isArray","iterator","getPrototypeOf","key","hasOwnProperty","call","Square","error","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","array","state","player","useEffect","onClick","isHuman","cloneBoard","func","arrangeShips","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","prevPlayer","nextPlayer","sumNumbersInArray","reduce","prevVal","currVal","Cell","React","memo","Board","countRows","clone","findShip","undefined","randomNumberGenerator","randomNumber","cloneState","minNumber","maxNumber","Math","round","random","Game","humanPlayer","setHumanPlayer","botPlayer","setBotPlayer","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57f40525.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const hoveredCells = {\n    cellsArray: [],\n    isValid: true,\n  }\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips() {\n    let findElem = this.newShipsArray.find(elem => !elem.isPlaced);\n\n    if (this.hoveredCells.isValid) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells.cellsArray[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n    }\n    this.hoveredCells.cellsArray = [];\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    if (this.orientation === 'horizontal') {\n      if (index % 10 + ship.length <= 10) {\n\n        let condition = true;\n\n        for (let i = index; i <= index + ship.length; i++) {\n          console.log()\n          if (this.selectedCells.includes(i)) {\n            condition = false;\n            break;\n          }\n        }\n\n        if (condition) {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = true;\n        } else {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = false;\n        }\n      } else {\n\n        this.hoveredCells.cellsArray = [];\n        let id = 0;\n\n        while (index % 10 + id < 10) {\n          this.hoveredCells.cellsArray.push(index + id++);\n        }\n        \n        this.hoveredCells.isValid = false;\n      }\n    } else if (this.orientation === 'vertical') {\n        if (index + (ship.length * 10 - 10) <= 99) {\n\n          let condition = true;\n\n          for (let i = index; i < index + ship.length * 10; i += 10) {\n            if (this.selectedCells.includes(i)) {\n              condition = false;\n              break;\n            }\n          }\n\n          if (condition) {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = true;\n          } else {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = false;\n          }\n\n        } else {\n\n          this.hoveredCells.cellsArray = [];\n          let id = 0;\n\n          while (index + id <= 99) {\n            this.hoveredCells.cellsArray.push(index + id);\n            id += 10;\n          }\n          this.hoveredCells.isValid = false;\n        }\n    } \n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    changeOrientation,\n    orientation,\n  }\n}\n\nexport default gameBoard;","import gameBoard from \"./gameBoard\";\n\nfunction templateObjForPlayers() {\n  const prototype = gameBoard();\n  const isReady = false;\n\n  return Object.assign(Object.create(prototype), {isReady});\n}\n\nconst Player = (() => {\n  let savedName = null;\n\n  return function () {\n    const prototype = templateObjForPlayers();\n    let name = savedName;\n    const isActive = true;\n\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n      savedName = selectedName;\n      this.name = selectedName;\n    }\n\n    return Object.assign(Object.create(prototype), {name, isActive, setName});\n  }\n})()\n\nconst Robot = () => {\n  const prototype = templateObjForPlayers();\n  const name = 'robot';\n  const isActive = false;\n\n  return Object.assign(Object.create(prototype), {name, isActive});\n}\n\nexport { Player, Robot }","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Player, Robot } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => {\n        Player().setName(e.target.value)}\n      } />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","function cloneObj(item) {\n  let cloneElem;\n\n  if (Array.isArray(item)) {\n    cloneElem = [];\n\n    for (const iterator of item) {\n      cloneElem.push(cloneObj(iterator));\n    }\n\n  } else if (typeof item === 'object' && item) {\n    let prototype = cloneObj(Object.getPrototypeOf(item));\n    cloneElem = Object.create(prototype);\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      }\n    }\n\n    /* cloneElem = Object.create(Object.getPrototypeOf(item));\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      } else {\n        console.log(Object.getPrototypeOf(item))\n      }\n    } */\n    /* for (const key in item) {\n      cloneElem[key] = cloneObj(item[key]);\n    } */\n  } else {\n    cloneElem = item;\n  }\n\n  return cloneElem;\n}\n\nexport default cloneObj;","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport cloneObj from \"../../../factoriesFunc/cloneObj\";\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.error.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isError, setIsError]       = useState(false);\n  const [isHover, setIsHover]       = useState(false);\n\n  const array = props.state.player.newShipsArray;\n  const player = props.state.player;\n\n  useEffect(() => {\n    if (player.hoveredCells.cellsArray.includes(props.index)) {\n      if (player.hoveredCells.isValid) {\n        setIsHover(true);\n        setIsError(false);\n      } else {\n        setIsError(true);\n      }\n    } else {\n      setIsHover(false);\n      setIsError(false);\n      \n      for (const item of array) {\n        if (item.isPlaced) {\n          let condition = item.shipPart.find(elem => elem.coord === props.index)\n      \n          if (condition) {\n            setIsSelected(true);\n          }\n        }\n      }\n    }\n  })\n\n  function arrangeShips() {\n    let cloneBoard = cloneObj(props.state.player);\n    cloneBoard.placeShips(props.index);\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n      cloneBoard.isActive = false;\n    }\n    props.state.func(cloneBoard);\n  }\n\n  function shipHover() {\n    let cloneBoard = cloneObj(props.state.player);\n    \n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    props.state.func(cloneBoard);\n  }\n\n  return (\n    <Square \n    onClick={() => player.isReady || !props.isHuman ? null : arrangeShips()} \n    onMouseEnter={() => player.isReady || !props.isHuman ? null : shipHover()}\n    status={{key: isSelected}} error={{key: isError}} hover={{key: isHover}}>{props.index}</Square>\n  )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  const prevPlayer = prevProps.state.player;\n  const nextPlayer = nextProps.state.player;\n\n  if (prevPlayer.hoveredCells.cellsArray.includes(nextProps.index) || nextPlayer.hoveredCells.cellsArray.includes(nextProps.index)) {\n    return false;\n  } else if (prevPlayer.isReady !== nextPlayer.isReady) {\n    return false\n  } else if (prevPlayer.orientation !== nextPlayer.orientation) {\n    return false;\n  } else if (sumNumbersInArray(prevPlayer.selectedCells) !== sumNumbersInArray(nextPlayer.selectedCells)) {\n    return false;\n  } else {\n    const array = prevPlayer.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction sumNumbersInArray(array) {\n  return array.reduce((prevVal, currVal) => prevVal + currVal, 0)\n}\n\nexport default Cell;","import React from 'react';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport cloneObj from '../../../factoriesFunc/cloneObj';\nimport { useEffect } from 'react/cjs/react.development';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const state = {\n    player: props.player, \n    func: props.func\n  }\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => {\n      return <Cell key={id} index={id} state={state} isHuman={props.isHuman} />\n    });\n  }\n\n  useEffect(() => {\n    if (props.player.name === 'robot' && props.player.isActive) {\n      let clone = cloneObj(props.player);\n      let findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n\n      while (findShip !== undefined) {\n        let arrayOrienttation = ['vertical', 'horizontal']\n        let orientation = arrayOrienttation[randomNumberGenerator(1, 2)];\n        let randomNumber = randomNumberGenerator(1, 100);\n        clone.orientation = orientation;\n        clone.addCellsIntoHoveredCells(findShip, randomNumber);\n        clone.placeShips();\n        findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n        props.func(clone);\n      }\n    }\n  })\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = cloneObj(props.player);\n        cloneState.changeOrientation();\n        props.func(cloneState);\n      }}>axis: {props.player.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  )\n}\n\n\n\nfunction randomNumberGenerator(minNumber, maxNumber) {\n/*   let minNumber = 1;\n  let maxNumber = 100; */\n  return Math.round(minNumber + (maxNumber - minNumber + 1) * Math.random() - 0.5) - 1; \n}\n\n/* function setRandomOrientation() {\n  let array = ['vertical', 'horizontal'];\n  let minNumber = 1;\n  let maxNumber = 2;\n  return array[Math.round(minNumber + (maxNumber - minNumber + 1) * Math.random() - 0.5) - 1]; \n} */","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { Player, Robot } from \"../../factoriesFunc/player\";\nimport { useEffect, useState } from \"react\";\nimport cloneObj from \"../../factoriesFunc/cloneObj\";\n\nfunction gameLoop() {\n  // создать функцию игрового цикла\n  // сохранить сюда humanPlayer и botPlayer\n  // и передавать ходы\n\n  const humanPlayer = Player();\n  const botPlayer = Robot();\n\n  //фукнция для передачи хода\n  function changeMove(params) {\n    if (humanPlayer.isActive) {\n      humanPlayer.isActive = false;\n      botPlayer.isActive = true;\n    } else {\n      humanPlayer.isActive = true;\n      botPlayer.isActive = false;\n    }\n  }\n\n  return {humanPlayer, botPlayer, changeMove}\n}\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n  }\n`;\n\nexport default function Game() {\n  const [humanPlayer, setHumanPlayer] = useState(Player());\n  const [botPlayer, setBotPlayer] = useState(Robot());\n\n  /* const [gameLoopObj, setGameLoop] = useState(gameLoop());\n  const [humanPlayer, setHumanPlayer] = useState(gameLoopObj.humanPlayer);\n  const [botPlayer, setBotPlayer] = useState(gameLoopObj.botPlayer); */\n\n  //console.log(gameLoopObj.humanPlayer === humanPlayer);\n\n  useEffect(() => {\n    if (!humanPlayer.isActive) {\n      let clone = cloneObj(botPlayer);\n      clone.isActive = true;\n      setBotPlayer(clone);\n    } else {\n      let clone = cloneObj(botPlayer);\n      clone.isActive = false;\n      setBotPlayer(clone)\n    }\n  }, [humanPlayer.isActive]);\n\n  //console.log(humanPlayer)\n\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} func={setHumanPlayer} isHuman />\n        <Board player={botPlayer} func={setBotPlayer} />\n        {/* <Board player={humanPlayer} func={setHumanPlayer} isHuman />\n        <Board player={botPlayer} func={setBotPlayer} /> */}\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}