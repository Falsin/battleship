{"version":3,"sources":["components/Footer.js","components/header.js","factoriesFunc/ship.js","factoriesFunc/gameBoard.js","factoriesFunc/player.js","components/componentsForMainContent/RegistComp.js","factoriesFunc/cloneObj.js","components/componentsForMainContent/componentsForGame/Cell.js","components/componentsForMainContent/componentsForGame/Board.js","components/componentsForMainContent/GameComp.js","components/mainContent.js","pages/registrationPage.js","pages/gamePage.js","Routes.js","index.js"],"names":["Wrapper","styled","footer","Footer","href","header","Title","h1","Header","params","ship","shipPart","obj","isDamage","Array","length","fill","map","Object","assign","createShipParts","hit","positionNumber","isSunk","filter","elem","isPlaced","gameBoard","placeShips","index","findElem","this","newShipsArray","find","hoveredCells","isValid","cellsArray","newArr","id","coord","selectedCells","push","addCellsIntoHoveredCells","name","orientation","condition","i","includes","changeOrientation","templateObjForPlayers","prototype","create","isReady","getDamage","requiredElem","console","log","Player","savedName","isActive","setName","selectedName","div","Regist","props","placeholder","onBlur","e","target","value","to","cloneObj","item","cloneElem","isArray","iterator","getPrototypeOf","key","hasOwnProperty","call","Square","error","status","hover","CreateCell","useState","isSelected","setIsSelected","isError","setIsError","isHover","setIsHover","player","state","array","returnFuncForClick","isHuman","cloneBoard","func","arrangeShips","useEffect","onClick","onMouseEnter","shipHover","comprasionOfProps","prevProps","nextProps","prevPlayer","nextPlayer","sumNumbersInArray","reduce","prevVal","currVal","Cell","React","memo","Board","countRows","clone","findShip","undefined","randomNumberGenerator","cloneState","minNumber","maxNumber","Math","round","random","Game","humanPlayer","setHumanPlayer","Robot","botPlayer","setBotPlayer","MainContent","page","Section","section","registrationPage","gamePage","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.317df08e.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Wrapper = styled.footer`\n  padding: 2vmin;\n  background: darkblue;\n\n  & a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <a href='https://github.com/Falsin'>Made by Falsin</a>\n    </Wrapper>\n  )\n}","import styled from \"styled-components\"\n\nconst Wrapper = styled.header`\n  background: red;\n  padding: 2vmin;\n  margin: 0;\n`;\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nexport default function Header(params) {\n  return (\n    <Wrapper>\n      <Title>Battleship</Title>\n    </Wrapper>\n  )\n}","function ship(ship) { \n  let shipPart = createShipParts(ship);\n  let isPlaced = false;\n\n  return {\n    shipPart,\n    hit(positionNumber) {\n      shipPart[positionNumber].isDamage = true;\n    },\n    isSunk() {\n      let hitsCount = shipPart.filter(elem => elem.isDamage).length;\n      return hitsCount === shipPart.length;\n    },\n    isPlaced,\n  }\n}\n\nfunction createShipParts(ship) {\n  let obj = {\n    isDamage: false,\n  }\n\n  return new Array(ship.length).fill().map(() => Object.assign({}, obj));\n}\n\nexport default ship","import ship from \"./ship\";\n\nfunction gameBoard() {\n  const orientation = 'horizontal';\n  const selectedCells = [];\n  const hoveredCells = {\n    cellsArray: [],\n    isValid: true,\n  }\n\n  const shipsArray = [\n    {\n      name: 'carrier',\n      length: 5,\n    },\n    {\n      name: 'battleship',\n      length: 4,\n    },\n    {\n      name: 'Cruiser',\n      length: 3,\n    },\n    {\n      name: 'submarine',\n      length: 3,\n    },\n    {\n      name: 'destroyer',\n      length: 2,\n    },\n  ]\n\n  let newShipsArray = shipsArray.map(elem => {\n    return {\n      ...elem,\n      ...ship(elem),\n    }\n  })\n\n  function changeOrientation() {\n    return this.orientation = (this.orientation === 'vertical') ? 'horizontal' : 'vertical';\n  }\n\n  function placeShips(index) {\n    let findElem = this.newShipsArray.find(elem => !elem.isPlaced);\n\n    if (this.hoveredCells.isValid && this.hoveredCells.cellsArray.length) {\n      const newArr = findElem.shipPart.map((elem, id) => elem.coord = this.hoveredCells.cellsArray[id]);\n      this.selectedCells.push(...newArr);\n      findElem.isPlaced = true;\n      this.hoveredCells.cellsArray = [];\n    } else {\n      this.addCellsIntoHoveredCells(findElem, index);\n    }\n  }\n\n  function addCellsIntoHoveredCells(ship, index) {\n    if (this.orientation === 'horizontal') {\n      if (index % 10 + ship.length <= 10) {\n        let condition = true;\n\n        for (let i = index; i <= index + ship.length; i++) {\n          if (this.selectedCells.includes(i)) {\n            condition = false;\n            break;\n          }\n        }\n\n        if (condition) {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = true;\n        } else {\n          this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + id);\n          this.hoveredCells.isValid = false;\n        }\n      } else {\n\n        this.hoveredCells.cellsArray = [];\n        let id = 0;\n\n        while (index % 10 + id < 10) {\n          this.hoveredCells.cellsArray.push(index + id++);\n        }\n        \n        this.hoveredCells.isValid = false;\n      }\n    } else if (this.orientation === 'vertical') {\n        if (index + (ship.length * 10 - 10) <= 99) {\n\n          let condition = true;\n\n          for (let i = index; i < index + ship.length * 10; i += 10) {\n            if (this.selectedCells.includes(i)) {\n              condition = false;\n              break;\n            }\n          }\n\n          if (condition) {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = true;\n          } else {\n            this.hoveredCells.cellsArray = ship.shipPart.map((elem, id) => index + (id * 10));\n            this.hoveredCells.isValid = false;\n          }\n\n        } else {\n\n          this.hoveredCells.cellsArray = [];\n          let id = 0;\n\n          while (index + id <= 99) {\n            this.hoveredCells.cellsArray.push(index + id);\n            id += 10;\n          }\n          this.hoveredCells.isValid = false;\n        }\n    } \n  }\n\n  return {\n    placeShips,\n    newShipsArray,\n    addCellsIntoHoveredCells,\n    hoveredCells,\n    selectedCells,\n    changeOrientation,\n    orientation,\n  }\n}\n\nexport default gameBoard;","import gameBoard from \"./gameBoard\";\n\nfunction templateObjForPlayers() {\n  const prototype = gameBoard();\n  const isReady = false;\n\n  function getDamage(index) {\n    const checkCoord = this.selectedCells.includes(index);\n\n    if (checkCoord) {\n      let requiredElem = null;\n      for (let i = 0; i < this.newShipsArray.length; i++) {\n        let shipPartArray = this.newShipsArray[i].shipPart;\n        requiredElem = shipPartArray.find(elem => elem.coord === index);\n\n        if (requiredElem) {\n          requiredElem.isDamage = true;\n          break\n        }\n\n        //console.log(this.newShipsArray[i].shipPart)\n      }\n      console.log(requiredElem)\n    }\n    //console.log(checkCoord);\n  }\n\n  return Object.assign(Object.create(prototype), {isReady, getDamage});\n}\n\nconst Player = (() => {\n  let savedName = null;\n\n  return function () {\n    const prototype = templateObjForPlayers();\n    let name = savedName;\n    const isActive = true;\n\n    function setName(selectedName) {\n      name = selectedName;\n      this.name = name;\n      savedName = selectedName;\n      this.name = selectedName;\n    }\n\n    return Object.assign(Object.create(prototype), {name, isActive, setName});\n  }\n})()\n\nconst Robot = () => {\n  const prototype = templateObjForPlayers();\n  const name = 'robot';\n  const isActive = false;\n\n  return Object.assign(Object.create(prototype), {name, isActive});\n}\n\nexport { Player, Robot }","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Player, Robot } from \"../../factoriesFunc/player\";\n\nconst Wrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & * {\n    padding: 0;\n    margin: 1vmin;\n  }\n\n  & input {\n    padding: 1vmin;\n    border: solid gray 1px;\n    outline: none;\n  }\n\n  a {\n    display: block;\n    border: solid gray 1px;\n    padding: 1vmin;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n\nexport default function Regist(props) {\n  return (\n    <Wrapper>\n      <h3>Enter player name:</h3>\n      <input placeholder='Combat' onBlur={(e) => {\n        Player().setName(e.target.value)}\n      } />\n      <Link to='/gamePage'>Start game</Link>\n    </Wrapper>\n  )\n}","function cloneObj(item) {\n  let cloneElem;\n\n  if (Array.isArray(item)) {\n    cloneElem = [];\n\n    for (const iterator of item) {\n      cloneElem.push(cloneObj(iterator));\n    }\n\n  } else if (typeof item === 'object' && item) {\n    let prototype = cloneObj(Object.getPrototypeOf(item));\n    cloneElem = Object.create(prototype);\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      }\n    }\n\n    /* cloneElem = Object.create(Object.getPrototypeOf(item));\n\n    for (const key in item) {\n      if (Object.hasOwnProperty.call(item, key)) {\n        //const element = object[key];\n        cloneElem[key] = cloneObj(item[key]);\n      } else {\n        console.log(Object.getPrototypeOf(item))\n      }\n    } */\n    /* for (const key in item) {\n      cloneElem[key] = cloneObj(item[key]);\n    } */\n  } else {\n    cloneElem = item;\n  }\n\n  return cloneElem;\n}\n\nexport default cloneObj;","import React, {useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport cloneObj from \"../../../factoriesFunc/cloneObj\";\n\nconst Square = styled.div`\n  background: ${(props) => {\n    return  (props.error.key) ? 'red' : \n            (props.status.key || props.hover.key) ? 'gray' : `rgb(66, 66, 255)`\n  }};\n  border: solid white 1px;\n`;\n\nconst Cell = React.memo(CreateCell, comprasionOfProps);\n\nfunction CreateCell (props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isError, setIsError]       = useState(false);\n  const [isHover, setIsHover]       = useState(false);\n\n  const player = props.state.player;\n  const array = player.newShipsArray;\n\n  useEffect(() => {\n    console.log(player.isReady)\n    if (!player.isReady) {\n      if (player.hoveredCells.cellsArray.includes(props.index)) {\n        if (player.hoveredCells.isValid) {\n          setIsHover(true);\n          setIsError(false);\n        } else {\n          setIsError(true);\n        }\n      } else {\n        setIsHover(false);\n        setIsError(false);\n        \n        for (const item of array) {\n          if (item.isPlaced) {\n            let condition = item.shipPart.find(elem => elem.coord === props.index)\n        \n            if (condition) {\n              setIsSelected(true);\n            }\n          }\n        }\n      }\n    } else {\n      if (player.selectedCells.includes(props.index)) {\n        setIsSelected(true);\n\n        let requiredElem = null;\n        for (let i = 0; i < player.newShipsArray.length; i++) {\n          let shipPartArray = player.newShipsArray[i].shipPart;\n          requiredElem = shipPartArray.find(elem => elem.coord === props.index);\n\n          if (requiredElem && requiredElem.isDamage) {\n            //requiredElem.isDamage = true;\n            //сделать так, чтобы менялся цвет\n            break\n          }\n\n          //console.log(this.newShipsArray[i].shipPart)\n        }\n      }\n    }\n  })\n\n  function arrangeShips() {\n    let cloneBoard = cloneObj(player);\n    cloneBoard.placeShips(props.index);\n\n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n    \n    if (!findElem) {\n      cloneBoard.isReady = true;\n      cloneBoard.isActive = false;\n    }\n    props.state.func(cloneBoard);\n  }\n\n  function shipHover() {\n    let cloneBoard = cloneObj(player);\n    \n    let findElem = cloneBoard.newShipsArray.find(elem => !elem.isPlaced);\n\n    cloneBoard.addCellsIntoHoveredCells(findElem, props.index);\n    props.state.func(cloneBoard);\n  }\n\n  function returnFuncForClick() {\n    if (player.isReady && player.isActive) {\n      return player.getDamage(props.index);\n    } else if (props.isHuman && !player.isReady) {\n      return arrangeShips();\n    }\n  }\n\n  return (\n    <Square \n    onClick={() => returnFuncForClick()} \n    onMouseEnter={() => player.isReady || !props.isHuman ? null : shipHover()}\n    status={{key: isSelected}} error={{key: isError}} hover={{key: isHover}}>{props.index}</Square>\n  )\n}\n\nfunction comprasionOfProps(prevProps, nextProps) {\n  const prevPlayer = prevProps.state.player;\n  const nextPlayer = nextProps.state.player;\n\n  if (prevPlayer.hoveredCells.cellsArray.includes(nextProps.index) || nextPlayer.hoveredCells.cellsArray.includes(nextProps.index)) {\n    return false;\n  } else if (prevPlayer.isReady !== nextPlayer.isReady) {\n    return false\n  } else if (prevPlayer.orientation !== nextPlayer.orientation) {\n    return false;\n  } else if (sumNumbersInArray(prevPlayer.selectedCells) !== sumNumbersInArray(nextPlayer.selectedCells)) {\n    return false;\n  } else {\n    const array = prevPlayer.newShipsArray;\n\n    for (const item of array) {\n      if (item.isPlaced) {\n        let condition = item.shipPart.find(elem => elem.coord === nextProps.index)\n\n        if (condition) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\nfunction sumNumbersInArray(array) {\n  return array.reduce((prevVal, currVal) => prevVal + currVal, 0)\n}\n\nexport default Cell;","import React from 'react';\nimport styled from \"styled-components\";\nimport Cell from './Cell';\nimport cloneObj from '../../../factoriesFunc/cloneObj';\nimport { useEffect } from 'react/cjs/react.development';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  div {\n    display: grid;\n    grid-template-columns: repeat(10, 4vmin);\n    grid-template-rows: repeat(10, 4vmin); \n  }\n\n  button {\n    margin-right: 2vmin;\n  }\n`;\n\nexport default function Board(props) {\n  const state = {\n    player: props.player, \n    func: props.func\n  }\n\n  function createBoardTemplate(countRows) {\n    return new Array(countRows).fill().map((elem, id) => {\n      return <Cell key={id} index={id} state={state} isHuman={props.isHuman} />\n    });\n  }\n\n  useEffect(() => {\n    if (props.player.name === 'robot' && props.player.isActive) {\n      let clone = cloneObj(props.player);\n      let findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n\n      while (findShip !== undefined) {\n        clone.orientation = ['vertical', 'horizontal'][randomNumberGenerator(1, 2)];\n        clone.addCellsIntoHoveredCells(findShip, randomNumberGenerator(1, 100));\n        clone.placeShips();\n        clone.isReady = true;\n        //clone.isActive = false;\n        findShip = clone.newShipsArray.find(elem => !elem.isPlaced);\n        props.func(clone);\n      }\n    }\n  })\n\n  return (\n    <Wrapper>\n      {(props.isHuman) ? <button onClick={() => {\n        let cloneState = cloneObj(props.player);\n        cloneState.changeOrientation();\n        props.func(cloneState);\n      }}>axis: {props.player.orientation === 'horizontal' ? 'X' : 'Y'}</button> : null}\n      <div>\n        {createBoardTemplate(100)}\n      </div>\n    </Wrapper>\n  )\n}\n\n\n\nfunction randomNumberGenerator(minNumber, maxNumber) {\n  return Math.round(minNumber + (maxNumber - minNumber + 1) * Math.random() - 0.5) - 1; \n}","import styled from \"styled-components\";\nimport Board from './componentsForGame/Board'\nimport { Player, Robot } from \"../../factoriesFunc/player\";\nimport { useEffect, useState } from \"react\";\nimport cloneObj from \"../../factoriesFunc/cloneObj\";\n\nconst Wrapper = styled.div`\n  #gameBoards {\n    display: flex;\n    justify-content: space-evenly;\n  }\n`;\n\n/* function gameLoop() {\n  let \n} */\n\nexport default function Game() {\n  const [humanPlayer, setHumanPlayer] = useState(Player());\n  const [botPlayer, setBotPlayer] = useState(Robot());\n\n  useEffect(() => {\n    if (!humanPlayer.isActive) {\n      let clone = cloneObj(botPlayer);\n      clone.isActive = true;\n      setBotPlayer(clone);\n    }\n  }, [humanPlayer.isActive]);\n\n  useEffect(() => {\n    if (!botPlayer.isActive) {\n      let clone = cloneObj(humanPlayer);\n      clone.isActive = true;\n      setHumanPlayer(clone);\n    }\n  }, [botPlayer.isActive]);\n\n  return (\n    <Wrapper>\n      <div id='gameBoards'>\n        <Board player={humanPlayer} func={setHumanPlayer} isHuman /* enemyState={{botPlayer, func: setBotPlayer}} */ />\n        <Board player={botPlayer} func={setBotPlayer} /* enemyState={{humanPlayer, func: setHumanPlayer}} */ />\n      </div>\n    </Wrapper>\n  )\n}","import Regist from \"./componentsForMainContent/RegistComp\";\nimport Game from \"./componentsForMainContent/GameComp\";\n\nexport default function MainContent(props) {\n  return (\n    (props.page === 'registration') ? <Regist /> : <Game />\n  )\n}","import styled from \"styled-components\";\nimport Footer from \"../components/Footer\";\nimport Header from \"../components/header\";\nimport MainContent from \"../components/mainContent\";\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nexport default function registrationPage(params) {\n  return (\n    <Section>\n      <Header />\n      <MainContent page={'registration'} />\n      <Footer />\n    </Section>\n  )\n}","import Header from \"../components/header\";\nimport Footer from \"../components/Footer\";\nimport MainContent from \"../components/mainContent\";\n\nfunction gamePage(params) {\n  return (\n    <section>\n      <Header />\n      <MainContent />\n      <Footer />\n    </section>\n  )\n}\n\nexport default gamePage;","import { HashRouter, Switch, Route } from \"react-router-dom\";\nimport registrationPage from \"./pages/registrationPage\";\nimport gamePage from \"./pages/gamePage\";\n\nfunction Routes() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={registrationPage} />\n        <Route exact path='/gamePage' component={gamePage} />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport style from './style.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}